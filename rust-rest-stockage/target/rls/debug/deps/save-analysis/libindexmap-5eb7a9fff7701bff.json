{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0","program":"/home/alexis/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","indexmap","/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=5eb7a9fff7701bff","-C","extra-filename=-5eb7a9fff7701bff","--out-dir","/home/alexis/Documents/rust-rest-example/target/rls/debug/deps","-L","dependency=/home/alexis/Documents/rust-rest-example/target/rls/debug/deps","--cap-lints","allow","--cfg","has_std","--error-format=json","--sysroot","/home/alexis/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/alexis/Documents/rust-rest-example/target/rls/debug/deps/libindexmap-5eb7a9fff7701bff.rmeta"},"prelude":{"crate_id":{"name":"indexmap","disambiguator":[5014823003396652081,13279462165241848099]},"crate_root":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src","external_crates":[{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[9744254129402482468,12445345062611050884]}},{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[9942249472390543209,15863006584859964888]}},{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[1795893391416169141,8075121191677772249]}},{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[1572415099058457553,2135166978196155506]}},{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[13603829026942055011,2471063435589406066]}},{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[3150535728137067081,14418570958612661587]}},{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[7556171729466642164,9608667095244489899]}},{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[10806810126330215714,2553684360462883780]}},{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[1818097271180387350,15438349324121503308]}},{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[4437646126609693087,6536018436310544926]}},{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[11991037487279530558,3795792059683432706]}},{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[1437858958743878161,787253638674005063]}},{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[4592710621585877372,1780610752140463821]}},{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[6338654217379816643,7168927451833124687]}},{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","num":15,"id":{"name":"miniz_oxide","disambiguator":[18193432317814560663,14768114254071685082]}},{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","num":16,"id":{"name":"adler","disambiguator":[12647259490832872807,4960225096531867135]}},{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[8559662747993890479,3650412061717966503]}}],"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","byte_start":0,"byte_end":4467,"line_start":1,"line_end":164,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":24},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":11753,"byte_end":11764,"line_start":9,"line_end":9,"column_start":23,"column_end":34},"alias_span":null,"name":"MutableKeys","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":10},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","byte_start":2894,"byte_end":2904,"line_start":90,"line_end":90,"column_start":21,"column_end":31},"alias_span":null,"name":"Equivalent","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1060},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","byte_start":2919,"byte_end":2927,"line_start":91,"line_end":91,"column_start":14,"column_end":22},"alias_span":null,"name":"IndexMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1131},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","byte_start":2942,"byte_end":2950,"line_start":92,"line_end":92,"column_start":14,"column_end":22},"alias_span":null,"name":"IndexSet","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","byte_start":0,"byte_end":4467,"line_start":1,"line_end":164,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":8},{"krate":0,"index":17},{"krate":0,"index":43},{"krate":0,"index":54},{"krate":0,"index":639},{"krate":0,"index":1022},{"krate":0,"index":1023},{"krate":0,"index":1024},{"krate":0,"index":1161},{"krate":0,"index":1166},{"krate":0,"index":1164},{"krate":0,"index":1025},{"krate":0,"index":1027},{"krate":0,"index":1029},{"krate":0,"index":1167},{"krate":0,"index":1181},{"krate":0,"index":1177},{"krate":0,"index":1173},{"krate":0,"index":1031},{"krate":0,"index":1042}],"decl_id":null,"docs":" [`IndexMap`] is a hash table where the iteration order of the key-value\n pairs is independent of the hash values of the keys.","sig":null,"attributes":[{"value":"deny(unsafe_code)","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","byte_start":0,"byte_end":21,"line_start":1,"line_end":1,"column_start":1,"column_end":22}},{"value":"/ [`IndexMap`] is a hash table where the iteration order of the key-value","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","byte_start":113,"byte_end":188,"line_start":5,"line_end":5,"column_start":1,"column_end":76}},{"value":"/ pairs is independent of the hash values of the keys.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","byte_start":189,"byte_end":245,"line_start":6,"line_end":6,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","byte_start":246,"byte_end":249,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ [`IndexSet`] is a corresponding hash set using the same implementation and","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","byte_start":250,"byte_end":328,"line_start":8,"line_end":8,"column_start":1,"column_end":79}},{"value":"/ with similar properties.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","byte_start":329,"byte_end":357,"line_start":9,"line_end":9,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","byte_start":358,"byte_end":361,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ [`IndexMap`]: map/struct.IndexMap.html","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","byte_start":362,"byte_end":404,"line_start":11,"line_end":11,"column_start":1,"column_end":43}},{"value":"/ [`IndexSet`]: set/struct.IndexSet.html","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","byte_start":405,"byte_end":447,"line_start":12,"line_end":12,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","byte_start":448,"byte_end":451,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","byte_start":452,"byte_end":455,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ ### Feature Highlights","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","byte_start":456,"byte_end":482,"line_start":15,"line_end":15,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","byte_start":483,"byte_end":486,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ [`IndexMap`] and [`IndexSet`] are drop-in compatible with the std `HashMap`","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","byte_start":487,"byte_end":566,"line_start":17,"line_end":17,"column_start":1,"column_end":80}},{"value":"/ and `HashSet`, but they also have some features of note:","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","byte_start":567,"byte_end":627,"line_start":18,"line_end":18,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","byte_start":628,"byte_end":631,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ - The ordering semantics (see their documentation for details)","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","byte_start":632,"byte_end":698,"line_start":20,"line_end":20,"column_start":1,"column_end":67}},{"value":"/ - Sorting methods and the [`.pop()`][IndexMap::pop] methods.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","byte_start":699,"byte_end":763,"line_start":21,"line_end":21,"column_start":1,"column_end":65}},{"value":"/ - The [`Equivalent`] trait, which offers more flexible equality definitions","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","byte_start":764,"byte_end":843,"line_start":22,"line_end":22,"column_start":1,"column_end":80}},{"value":"/   between borrowed and owned versions of keys.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","byte_start":844,"byte_end":894,"line_start":23,"line_end":23,"column_start":1,"column_end":51}},{"value":"/ - The [`MutableKeys`][map::MutableKeys] trait, which gives opt-in mutable","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","byte_start":895,"byte_end":972,"line_start":24,"line_end":24,"column_start":1,"column_end":78}},{"value":"/   access to hash map keys.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","byte_start":973,"byte_end":1003,"line_start":25,"line_end":25,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","byte_start":1004,"byte_end":1007,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ ### Rust Version","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","byte_start":1008,"byte_end":1028,"line_start":27,"line_end":27,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","byte_start":1029,"byte_end":1032,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ This version of indexmap requires Rust 1.18 or later, or 1.32+ for","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","byte_start":1033,"byte_end":1103,"line_start":29,"line_end":29,"column_start":1,"column_end":71}},{"value":"/ development builds, and Rust 1.36+ for using with `alloc` (without `std`),","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","byte_start":1104,"byte_end":1182,"line_start":30,"line_end":30,"column_start":1,"column_end":79}},{"value":"/ see below.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","byte_start":1183,"byte_end":1197,"line_start":31,"line_end":31,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","byte_start":1198,"byte_end":1201,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ The indexmap 1.x release series will use a carefully considered version","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","byte_start":1202,"byte_end":1277,"line_start":33,"line_end":33,"column_start":1,"column_end":76}},{"value":"/ upgrade policy, where in a later 1.x version, we will raise the minimum","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","byte_start":1278,"byte_end":1353,"line_start":34,"line_end":34,"column_start":1,"column_end":76}},{"value":"/ required Rust version.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","byte_start":1354,"byte_end":1380,"line_start":35,"line_end":35,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","byte_start":1381,"byte_end":1384,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ ## No Standard Library Targets","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","byte_start":1385,"byte_end":1419,"line_start":37,"line_end":37,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","byte_start":1420,"byte_end":1423,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ From Rust 1.36, this crate supports being built without `std`, requiring","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","byte_start":1424,"byte_end":1500,"line_start":39,"line_end":39,"column_start":1,"column_end":77}},{"value":"/ `alloc` instead. This is enabled automatically when it is detected that","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","byte_start":1501,"byte_end":1576,"line_start":40,"line_end":40,"column_start":1,"column_end":76}},{"value":"/ `std` is not available. There is no crate feature to enable/disable to","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","byte_start":1577,"byte_end":1651,"line_start":41,"line_end":41,"column_start":1,"column_end":75}},{"value":"/ trigger this. It can be tested by building for a std-less target.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","byte_start":1652,"byte_end":1721,"line_start":42,"line_end":42,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","byte_start":1722,"byte_end":1725,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ - Creating maps and sets using [`new`][IndexMap::new] and","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","byte_start":1726,"byte_end":1787,"line_start":44,"line_end":44,"column_start":1,"column_end":62}},{"value":"/ [`with_capacity`][IndexMap::with_capacity] is unavailable without `std`.  ","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","byte_start":1788,"byte_end":1866,"line_start":45,"line_end":45,"column_start":1,"column_end":79}},{"value":"/   Use methods [`IndexMap::default`][def],","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","byte_start":1867,"byte_end":1912,"line_start":46,"line_end":46,"column_start":1,"column_end":46}},{"value":"/   [`with_hasher`][IndexMap::with_hasher],","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","byte_start":1913,"byte_end":1958,"line_start":47,"line_end":47,"column_start":1,"column_end":46}},{"value":"/   [`with_capacity_and_hasher`][IndexMap::with_capacity_and_hasher] instead.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","byte_start":1959,"byte_end":2038,"line_start":48,"line_end":48,"column_start":1,"column_end":80}},{"value":"/   A no-std compatible hasher will be needed as well, for example","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","byte_start":2039,"byte_end":2107,"line_start":49,"line_end":49,"column_start":1,"column_end":69}},{"value":"/   from the crate `twox-hash`.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","byte_start":2108,"byte_end":2141,"line_start":50,"line_end":50,"column_start":1,"column_end":34}},{"value":"/ - Macros [`indexmap!`] and [`indexset!`] are unavailable without `std`.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","byte_start":2142,"byte_end":2217,"line_start":51,"line_end":51,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","byte_start":2218,"byte_end":2221,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ [def]: map/struct.IndexMap.html#impl-Default","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","byte_start":2222,"byte_end":2270,"line_start":53,"line_end":53,"column_start":1,"column_end":49}}]},{"kind":"Trait","id":{"krate":0,"index":10},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/equivalent.rs","byte_start":8441,"byte_end":8451,"line_start":13,"line_end":13,"column_start":11,"column_end":21},"name":"Equivalent","qualname":"::equivalent::Equivalent","value":"Equivalent<K: ?Sized>","parent":null,"children":[{"krate":0,"index":12}],"decl_id":null,"docs":" Key equivalence trait.","sig":null,"attributes":[{"value":"/ Key equivalence trait.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/equivalent.rs","byte_start":8051,"byte_end":8077,"line_start":3,"line_end":3,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/equivalent.rs","byte_start":8078,"byte_end":8081,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ This trait allows hash table lookup to be customized.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/equivalent.rs","byte_start":8082,"byte_end":8139,"line_start":5,"line_end":5,"column_start":1,"column_end":58}},{"value":"/ It has one blanket implementation that uses the regular `Borrow` solution,","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/equivalent.rs","byte_start":8140,"byte_end":8218,"line_start":6,"line_end":6,"column_start":1,"column_end":79}},{"value":"/ just like `HashMap` and `BTreeMap` do, so that you can pass `&str` to lookup","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/equivalent.rs","byte_start":8219,"byte_end":8299,"line_start":7,"line_end":7,"column_start":1,"column_end":81}},{"value":"/ into a map with `String` keys and so on.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/equivalent.rs","byte_start":8300,"byte_end":8344,"line_start":8,"line_end":8,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/equivalent.rs","byte_start":8345,"byte_end":8348,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ # Contract","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/equivalent.rs","byte_start":8349,"byte_end":8363,"line_start":10,"line_end":10,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/equivalent.rs","byte_start":8364,"byte_end":8367,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ The implementor **must** hash like `K`, if it is hashable.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/equivalent.rs","byte_start":8368,"byte_end":8430,"line_start":12,"line_end":12,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":12},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/equivalent.rs","byte_start":8539,"byte_end":8549,"line_start":15,"line_end":15,"column_start":8,"column_end":18},"name":"equivalent","qualname":"::equivalent::Equivalent::equivalent","value":"pub fn equivalent(&Self, &K) -> bool","parent":{"krate":0,"index":10},"children":[],"decl_id":null,"docs":" Compare self to `key` and return `true` if they are equal.\n","sig":null,"attributes":[{"value":"/ Compare self to `key` and return `true` if they are equal.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/equivalent.rs","byte_start":8469,"byte_end":8531,"line_start":14,"line_end":14,"column_start":5,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":23},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/mutable_keys.rs","byte_start":8884,"byte_end":8897,"line_start":6,"line_end":6,"column_start":12,"column_end":25},"name":"PrivateMarker","qualname":"::mutable_keys::PrivateMarker","value":"PrivateMarker {  }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":24},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/mutable_keys.rs","byte_start":9445,"byte_end":9456,"line_start":20,"line_end":20,"column_start":11,"column_end":22},"name":"MutableKeys","qualname":"::mutable_keys::MutableKeys","value":"MutableKeys","parent":null,"children":[{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":29},{"krate":0,"index":31}],"decl_id":null,"docs":" Opt-in mutable access to keys.","sig":null,"attributes":[{"value":"/ Opt-in mutable access to keys.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/mutable_keys.rs","byte_start":8902,"byte_end":8936,"line_start":8,"line_end":8,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/mutable_keys.rs","byte_start":8937,"byte_end":8940,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ These methods expose `&mut K`, mutable references to the key as it is stored","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/mutable_keys.rs","byte_start":8941,"byte_end":9021,"line_start":10,"line_end":10,"column_start":1,"column_end":81}},{"value":"/ in the map.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/mutable_keys.rs","byte_start":9022,"byte_end":9037,"line_start":11,"line_end":11,"column_start":1,"column_end":16}},{"value":"/ You are allowed to modify the keys in the hashmap **if the modifcation","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/mutable_keys.rs","byte_start":9038,"byte_end":9112,"line_start":12,"line_end":12,"column_start":1,"column_end":75}},{"value":"/ does not change the key’s hash and equality**.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/mutable_keys.rs","byte_start":9113,"byte_end":9165,"line_start":13,"line_end":13,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/mutable_keys.rs","byte_start":9166,"byte_end":9169,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ If keys are modified erronously, you can no longer look them up.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/mutable_keys.rs","byte_start":9170,"byte_end":9238,"line_start":15,"line_end":15,"column_start":1,"column_end":69}},{"value":"/ This is sound (memory safe) but a logical error hazard (just like","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/mutable_keys.rs","byte_start":9239,"byte_end":9308,"line_start":16,"line_end":16,"column_start":1,"column_end":70}},{"value":"/ implementing PartialEq, Eq, or Hash incorrectly would be).","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/mutable_keys.rs","byte_start":9309,"byte_end":9371,"line_start":17,"line_end":17,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/mutable_keys.rs","byte_start":9372,"byte_end":9375,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ `use` this trait to enable its methods for `IndexMap`.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/mutable_keys.rs","byte_start":9376,"byte_end":9434,"line_start":19,"line_end":19,"column_start":1,"column_end":59}}]},{"kind":"Type","id":{"krate":0,"index":25},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/mutable_keys.rs","byte_start":9468,"byte_end":9471,"line_start":21,"line_end":21,"column_start":10,"column_end":13},"name":"Key","qualname":"::mutable_keys::MutableKeys::Key","value":"type Key;","parent":{"krate":0,"index":24},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":26},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/mutable_keys.rs","byte_start":9482,"byte_end":9487,"line_start":22,"line_end":22,"column_start":10,"column_end":15},"name":"Value","qualname":"::mutable_keys::MutableKeys::Value","value":"type Value;","parent":{"krate":0,"index":24},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":27},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/mutable_keys.rs","byte_start":9559,"byte_end":9572,"line_start":25,"line_end":25,"column_start":8,"column_end":21},"name":"get_full_mut2","qualname":"::mutable_keys::MutableKeys::get_full_mut2","value":"pub fn get_full_mut2<Q: ?Sized>(&mut Self, &Q)\n-> Option<(usize, &mut Self::Key, &mut Self::Value)> where Q: Hash +\nEquivalent<Self::Key>","parent":{"krate":0,"index":24},"children":[],"decl_id":null,"docs":" Return item index, mutable reference to key and value\n","sig":null,"attributes":[{"value":"/ Return item index, mutable reference to key and value","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/mutable_keys.rs","byte_start":9494,"byte_end":9551,"line_start":24,"line_end":24,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":29},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/mutable_keys.rs","byte_start":10008,"byte_end":10015,"line_start":39,"line_end":39,"column_start":8,"column_end":15},"name":"retain2","qualname":"::mutable_keys::MutableKeys::retain2","value":"pub fn retain2<F>(&mut Self, F) where\nF: FnMut(&mut Self::Key, &mut Self::Value) -> bool","parent":{"krate":0,"index":24},"children":[],"decl_id":null,"docs":" Scan through each key-value pair in the map and keep those where the\n closure `keep` returns `true`.","sig":null,"attributes":[{"value":"/ Scan through each key-value pair in the map and keep those where the","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/mutable_keys.rs","byte_start":9736,"byte_end":9808,"line_start":32,"line_end":32,"column_start":5,"column_end":77}},{"value":"/ closure `keep` returns `true`.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/mutable_keys.rs","byte_start":9813,"byte_end":9847,"line_start":33,"line_end":33,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/mutable_keys.rs","byte_start":9852,"byte_end":9855,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/ The elements are visited in order, and remaining elements keep their","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/mutable_keys.rs","byte_start":9860,"byte_end":9932,"line_start":35,"line_end":35,"column_start":5,"column_end":77}},{"value":"/ order.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/mutable_keys.rs","byte_start":9937,"byte_end":9947,"line_start":36,"line_end":36,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/mutable_keys.rs","byte_start":9952,"byte_end":9955,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/mutable_keys.rs","byte_start":9960,"byte_end":10000,"line_start":38,"line_end":38,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":31},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/mutable_keys.rs","byte_start":10307,"byte_end":10323,"line_start":46,"line_end":46,"column_start":8,"column_end":24},"name":"__private_marker","qualname":"::mutable_keys::MutableKeys::__private_marker","value":"pub fn __private_marker(&Self) -> PrivateMarker","parent":{"krate":0,"index":24},"children":[],"decl_id":null,"docs":" This method is not useful in itself – it is there to “seal” the trait\n for external implementation, so that we can add methods without\n causing breaking changes.\n","sig":null,"attributes":[{"value":"/ This method is not useful in itself – it is there to “seal” the trait","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/mutable_keys.rs","byte_start":10114,"byte_end":10193,"line_start":43,"line_end":43,"column_start":5,"column_end":78}},{"value":"/ for external implementation, so that we can add methods without","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/mutable_keys.rs","byte_start":10198,"byte_end":10265,"line_start":44,"line_end":44,"column_start":5,"column_end":72}},{"value":"/ causing breaking changes.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/mutable_keys.rs","byte_start":10270,"byte_end":10299,"line_start":45,"line_end":45,"column_start":5,"column_end":34}}]},{"kind":"Mod","id":{"krate":0,"index":54},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"map","qualname":"::map","value":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","parent":null,"children":[{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":1202},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":1208},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":1218},{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":1234},{"krate":0,"index":77},{"krate":0,"index":1049},{"krate":0,"index":1054},{"krate":0,"index":80},{"krate":0,"index":83},{"krate":0,"index":85},{"krate":0,"index":88},{"krate":0,"index":91},{"krate":0,"index":94},{"krate":0,"index":1057},{"krate":0,"index":1059},{"krate":0,"index":97},{"krate":0,"index":99},{"krate":0,"index":101},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":120},{"krate":0,"index":1060},{"krate":0,"index":1066},{"krate":0,"index":1071},{"krate":0,"index":1077},{"krate":0,"index":126},{"krate":0,"index":127},{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":147},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":155},{"krate":0,"index":160},{"krate":0,"index":172},{"krate":0,"index":177},{"krate":0,"index":181},{"krate":0,"index":183},{"krate":0,"index":186},{"krate":0,"index":196},{"krate":0,"index":208},{"krate":0,"index":213},{"krate":0,"index":221},{"krate":0,"index":238},{"krate":0,"index":243},{"krate":0,"index":251},{"krate":0,"index":261},{"krate":0,"index":266},{"krate":0,"index":331},{"krate":0,"index":334},{"krate":0,"index":344},{"krate":0,"index":390},{"krate":0,"index":392},{"krate":0,"index":393},{"krate":0,"index":394},{"krate":0,"index":395},{"krate":0,"index":400},{"krate":0,"index":405},{"krate":0,"index":410},{"krate":0,"index":415},{"krate":0,"index":420},{"krate":0,"index":425},{"krate":0,"index":430},{"krate":0,"index":435},{"krate":0,"index":440},{"krate":0,"index":445},{"krate":0,"index":450},{"krate":0,"index":455},{"krate":0,"index":460},{"krate":0,"index":465},{"krate":0,"index":470},{"krate":0,"index":475},{"krate":0,"index":480},{"krate":0,"index":485},{"krate":0,"index":490},{"krate":0,"index":495},{"krate":0,"index":500},{"krate":0,"index":505},{"krate":0,"index":510},{"krate":0,"index":515},{"krate":0,"index":520},{"krate":0,"index":525},{"krate":0,"index":529},{"krate":0,"index":533},{"krate":0,"index":538},{"krate":0,"index":542},{"krate":0,"index":546},{"krate":0,"index":551},{"krate":0,"index":556},{"krate":0,"index":560},{"krate":0,"index":568},{"krate":0,"index":576},{"krate":0,"index":583},{"krate":0,"index":584},{"krate":0,"index":585},{"krate":0,"index":586},{"krate":0,"index":594},{"krate":0,"index":601},{"krate":0,"index":607},{"krate":0,"index":613},{"krate":0,"index":621},{"krate":0,"index":626},{"krate":0,"index":635}],"decl_id":null,"docs":" `IndexMap` is a hash table where the iteration order of the key-value\n pairs is independent of the hash values of the keys.\n","sig":null,"attributes":[{"value":"/ `IndexMap` is a hash table where the iteration order of the key-value","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":11514,"byte_end":11587,"line_start":1,"line_end":1,"column_start":1,"column_end":74}},{"value":"/ pairs is independent of the hash values of the keys.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":11588,"byte_end":11644,"line_start":2,"line_end":2,"column_start":1,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":1060},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":19317,"byte_end":19325,"line_start":297,"line_end":297,"column_start":12,"column_end":20},"name":"IndexMap","qualname":"::map::IndexMap","value":"IndexMap {  }","parent":null,"children":[{"krate":0,"index":1064},{"krate":0,"index":1065}],"decl_id":null,"docs":" A hash table where the iteration order of the key-value pairs is independent\n of the hash values of the keys.","sig":null,"attributes":[{"value":"/ A hash table where the iteration order of the key-value pairs is independent","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":17864,"byte_end":17944,"line_start":254,"line_end":254,"column_start":1,"column_end":81}},{"value":"/ of the hash values of the keys.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":17945,"byte_end":17980,"line_start":255,"line_end":255,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":17981,"byte_end":17984,"line_start":256,"line_end":256,"column_start":1,"column_end":4}},{"value":"/ The interface is closely compatible with the standard `HashMap`, but also","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":17985,"byte_end":18062,"line_start":257,"line_end":257,"column_start":1,"column_end":78}},{"value":"/ has additional features.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":18063,"byte_end":18091,"line_start":258,"line_end":258,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":18092,"byte_end":18095,"line_start":259,"line_end":259,"column_start":1,"column_end":4}},{"value":"/ # Order","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":18096,"byte_end":18107,"line_start":260,"line_end":260,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":18108,"byte_end":18111,"line_start":261,"line_end":261,"column_start":1,"column_end":4}},{"value":"/ The key-value pairs have a consistent order that is determined by","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":18112,"byte_end":18181,"line_start":262,"line_end":262,"column_start":1,"column_end":70}},{"value":"/ the sequence of insertion and removal calls on the map. The order does","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":18182,"byte_end":18256,"line_start":263,"line_end":263,"column_start":1,"column_end":75}},{"value":"/ not depend on the keys or the hash function at all.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":18257,"byte_end":18312,"line_start":264,"line_end":264,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":18313,"byte_end":18316,"line_start":265,"line_end":265,"column_start":1,"column_end":4}},{"value":"/ All iterators traverse the map in *the order*.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":18317,"byte_end":18367,"line_start":266,"line_end":266,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":18368,"byte_end":18371,"line_start":267,"line_end":267,"column_start":1,"column_end":4}},{"value":"/ The insertion order is preserved, with **notable exceptions** like the","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":18372,"byte_end":18446,"line_start":268,"line_end":268,"column_start":1,"column_end":75}},{"value":"/ `.remove()` or `.swap_remove()` methods. Methods such as `.sort_by()` of","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":18447,"byte_end":18523,"line_start":269,"line_end":269,"column_start":1,"column_end":77}},{"value":"/ course result in a new order, depending on the sorting order.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":18524,"byte_end":18589,"line_start":270,"line_end":270,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":18590,"byte_end":18593,"line_start":271,"line_end":271,"column_start":1,"column_end":4}},{"value":"/ # Indices","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":18594,"byte_end":18607,"line_start":272,"line_end":272,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":18608,"byte_end":18611,"line_start":273,"line_end":273,"column_start":1,"column_end":4}},{"value":"/ The key-value pairs are indexed in a compact range without holes in the","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":18612,"byte_end":18687,"line_start":274,"line_end":274,"column_start":1,"column_end":76}},{"value":"/ range `0..self.len()`. For example, the method `.get_full` looks up the","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":18688,"byte_end":18763,"line_start":275,"line_end":275,"column_start":1,"column_end":76}},{"value":"/ index for a key, and the method `.get_index` looks up the key-value pair by","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":18764,"byte_end":18843,"line_start":276,"line_end":276,"column_start":1,"column_end":80}},{"value":"/ index.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":18844,"byte_end":18854,"line_start":277,"line_end":277,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":18855,"byte_end":18858,"line_start":278,"line_end":278,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":18859,"byte_end":18873,"line_start":279,"line_end":279,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":18874,"byte_end":18877,"line_start":280,"line_end":280,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":18878,"byte_end":18885,"line_start":281,"line_end":281,"column_start":1,"column_end":8}},{"value":"/ use indexmap::IndexMap;","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":18886,"byte_end":18913,"line_start":282,"line_end":282,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":18914,"byte_end":18917,"line_start":283,"line_end":283,"column_start":1,"column_end":4}},{"value":"/ // count the frequency of each letter in a sentence.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":18918,"byte_end":18974,"line_start":284,"line_end":284,"column_start":1,"column_end":57}},{"value":"/ let mut letters = IndexMap::new();","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":18975,"byte_end":19013,"line_start":285,"line_end":285,"column_start":1,"column_end":39}},{"value":"/ for ch in \"a short treatise on fungi\".chars() {","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":19014,"byte_end":19065,"line_start":286,"line_end":286,"column_start":1,"column_end":52}},{"value":"/     *letters.entry(ch).or_insert(0) += 1;","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":19066,"byte_end":19111,"line_start":287,"line_end":287,"column_start":1,"column_end":46}},{"value":"/ }","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":19112,"byte_end":19117,"line_start":288,"line_end":288,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":19118,"byte_end":19121,"line_start":289,"line_end":289,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(letters[&'s'], 2);","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":19122,"byte_end":19155,"line_start":290,"line_end":290,"column_start":1,"column_end":34}},{"value":"/ assert_eq!(letters[&'t'], 3);","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":19156,"byte_end":19189,"line_start":291,"line_end":291,"column_start":1,"column_end":34}},{"value":"/ assert_eq!(letters[&'u'], 1);","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":19190,"byte_end":19223,"line_start":292,"line_end":292,"column_start":1,"column_end":34}},{"value":"/ assert_eq!(letters.get(&'y'), None);","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":19224,"byte_end":19264,"line_start":293,"line_end":293,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":19265,"byte_end":19272,"line_start":294,"line_end":294,"column_start":1,"column_end":8}},{"value":"cfg(has_std)","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":19290,"byte_end":19305,"line_start":296,"line_end":296,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":22640,"byte_end":22643,"line_start":426,"line_end":426,"column_start":12,"column_end":15},"name":"new","qualname":"<IndexMap<K, V>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new map. (Does not allocate.)\n","sig":null,"attributes":[{"value":"/ Create a new map. (Does not allocate.)","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":22586,"byte_end":22628,"line_start":425,"line_end":425,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":159},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":22856,"byte_end":22869,"line_start":434,"line_end":434,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<IndexMap<K, V>>::with_capacity","value":"pub fn with_capacity(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new map with capacity for `n` key-value pairs. (Does not\n allocate if `n` is zero.)","sig":null,"attributes":[{"value":"/ Create a new map with capacity for `n` key-value pairs. (Does not","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":22698,"byte_end":22767,"line_start":430,"line_end":430,"column_start":5,"column_end":74}},{"value":"/ allocate if `n` is zero.)","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":22772,"byte_end":22801,"line_start":431,"line_end":431,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":22806,"byte_end":22809,"line_start":432,"line_end":432,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":22814,"byte_end":22844,"line_start":433,"line_end":433,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":23153,"byte_end":23177,"line_start":444,"line_end":444,"column_start":12,"column_end":36},"name":"with_capacity_and_hasher","qualname":"<IndexMap<K, V, S>>::with_capacity_and_hasher","value":"pub fn with_capacity_and_hasher(usize, S) -> Self where S: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Create a new map with capacity for `n` key-value pairs. (Does not\n allocate if `n` is zero.)","sig":null,"attributes":[{"value":"/ Create a new map with capacity for `n` key-value pairs. (Does not","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":22995,"byte_end":23064,"line_start":440,"line_end":440,"column_start":5,"column_end":74}},{"value":"/ allocate if `n` is zero.)","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":23069,"byte_end":23098,"line_start":441,"line_end":441,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":23103,"byte_end":23106,"line_start":442,"line_end":442,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":23111,"byte_end":23141,"line_start":443,"line_end":443,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":165},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":24080,"byte_end":24083,"line_start":474,"line_end":474,"column_start":12,"column_end":15},"name":"len","qualname":"<IndexMap<K, V, S>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the number of key-value pairs in the map.","sig":null,"attributes":[{"value":"/ Return the number of key-value pairs in the map.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":23973,"byte_end":24025,"line_start":471,"line_end":471,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":24030,"byte_end":24033,"line_start":472,"line_end":472,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":24038,"byte_end":24068,"line_start":473,"line_end":473,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":24241,"byte_end":24249,"line_start":481,"line_end":481,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<IndexMap<K, V, S>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the map contains no elements.","sig":null,"attributes":[{"value":"/ Returns true if the map contains no elements.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":24137,"byte_end":24186,"line_start":478,"line_end":478,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":24191,"byte_end":24194,"line_start":479,"line_end":479,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":24199,"byte_end":24229,"line_start":480,"line_end":480,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":167},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":24354,"byte_end":24365,"line_start":486,"line_end":486,"column_start":12,"column_end":23},"name":"with_hasher","qualname":"<IndexMap<K, V, S>>::with_hasher","value":"pub fn with_hasher(S) -> Self where S: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Create a new map with `hash_builder`\n","sig":null,"attributes":[{"value":"/ Create a new map with `hash_builder`","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":24302,"byte_end":24342,"line_start":485,"line_end":485,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":24560,"byte_end":24566,"line_start":494,"line_end":494,"column_start":12,"column_end":18},"name":"hasher","qualname":"<IndexMap<K, V, S>>::hasher","value":"pub fn hasher(&Self) -> &S where S: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the map's `BuildHasher`.\n","sig":null,"attributes":[{"value":"/ Return a reference to the map's `BuildHasher`.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":24498,"byte_end":24548,"line_start":493,"line_end":493,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":169},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":24700,"byte_end":24708,"line_start":502,"line_end":502,"column_start":12,"column_end":20},"name":"capacity","qualname":"<IndexMap<K, V, S>>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Computes in **O(1)** time.\n","sig":null,"attributes":[{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":24658,"byte_end":24688,"line_start":501,"line_end":501,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":190},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":27296,"byte_end":27304,"line_start":597,"line_end":597,"column_start":5,"column_end":13},"name":"Occupied","qualname":"::map::Entry::Occupied","value":"Entry::Occupied(OccupiedEntry)","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Existing slot with equivalent key.\n","sig":null,"attributes":[{"value":"/ Existing slot with equivalent key.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":27253,"byte_end":27291,"line_start":596,"line_end":596,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":193},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":27387,"byte_end":27393,"line_start":599,"line_end":599,"column_start":5,"column_end":11},"name":"Vacant","qualname":"::map::Entry::Vacant","value":"Entry::Vacant(VacantEntry)","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Vacant slot (no equivalent key in the map).\n","sig":null,"attributes":[{"value":"/ Vacant slot (no equivalent key in the map).","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":27335,"byte_end":27382,"line_start":598,"line_end":598,"column_start":5,"column_end":52}}]},{"kind":"Enum","id":{"krate":0,"index":186},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":27223,"byte_end":27228,"line_start":595,"line_end":595,"column_start":10,"column_end":15},"name":"Entry","qualname":"::map::Entry","value":"pub enum Entry<'a, K: 'a, V: 'a> {\n\n    /// Existing slot with equivalent key.\n    Occupied(OccupiedEntry),\n\n    /// Vacant slot (no equivalent key in the map).\n    Vacant(VacantEntry),\n}","parent":null,"children":[{"krate":0,"index":190},{"krate":0,"index":193}],"decl_id":null,"docs":" Entry for an existing key-value pair or a vacant location to\n insert one.\n","sig":null,"attributes":[{"value":"/ Entry for an existing key-value pair or a vacant location to","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":27133,"byte_end":27197,"line_start":593,"line_end":593,"column_start":1,"column_end":65}},{"value":"/ insert one.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":27198,"byte_end":27213,"line_start":594,"line_end":594,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":200},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":27520,"byte_end":27529,"line_start":604,"line_end":604,"column_start":12,"column_end":21},"name":"or_insert","qualname":"<Entry>::or_insert","value":"pub fn or_insert(Self, V) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Computes in **O(1)** time (amortized average).\n","sig":null,"attributes":[{"value":"/ Computes in **O(1)** time (amortized average).","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":27458,"byte_end":27508,"line_start":603,"line_end":603,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":201},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":27782,"byte_end":27796,"line_start":612,"line_end":612,"column_start":12,"column_end":26},"name":"or_insert_with","qualname":"<Entry>::or_insert_with","value":"pub fn or_insert_with<F>(Self, F) -> &'a mut V where F: FnOnce() -> V","parent":null,"children":[],"decl_id":null,"docs":" Computes in **O(1)** time (amortized average).\n","sig":null,"attributes":[{"value":"/ Computes in **O(1)** time (amortized average).","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":27720,"byte_end":27770,"line_start":611,"line_end":611,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":203},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":28033,"byte_end":28036,"line_start":622,"line_end":622,"column_start":12,"column_end":15},"name":"key","qualname":"<Entry>::key","value":"pub fn key(&Self) -> &K","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":204},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":28288,"byte_end":28293,"line_start":630,"line_end":630,"column_start":12,"column_end":17},"name":"index","qualname":"<Entry>::index","value":"pub fn index(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the index where the key-value pair exists or will be inserted.\n","sig":null,"attributes":[{"value":"/ Return the index where the key-value pair exists or will be inserted.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":28203,"byte_end":28276,"line_start":629,"line_end":629,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":205},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":28520,"byte_end":28530,"line_start":638,"line_end":638,"column_start":12,"column_end":22},"name":"and_modify","qualname":"<Entry>::and_modify","value":"pub fn and_modify<F>(Self, F) -> Self where F: FnOnce(&mut V) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Modifies the entry if it is occupied.\n","sig":null,"attributes":[{"value":"/ Modifies the entry if it is occupied.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":28467,"byte_end":28508,"line_start":637,"line_end":637,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":207},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":29042,"byte_end":29052,"line_start":655,"line_end":655,"column_start":12,"column_end":22},"name":"or_default","qualname":"<Entry>::or_default","value":"pub fn or_default(Self) -> &'a mut V where V: Default","parent":null,"children":[],"decl_id":null,"docs":" Inserts a default-constructed value in the entry if it is vacant and returns a mutable\n reference to it. Otherwise a mutable reference to an already existent value is returned.","sig":null,"attributes":[{"value":"/ Inserts a default-constructed value in the entry if it is vacant and returns a mutable","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":28780,"byte_end":28870,"line_start":651,"line_end":651,"column_start":5,"column_end":95}},{"value":"/ reference to it. Otherwise a mutable reference to an already existent value is returned.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":28875,"byte_end":28967,"line_start":652,"line_end":652,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":28972,"byte_end":28975,"line_start":653,"line_end":653,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (amortized average).","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":28980,"byte_end":29030,"line_start":654,"line_end":654,"column_start":5,"column_end":55}}]},{"kind":"Struct","id":{"krate":0,"index":213},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":29763,"byte_end":29776,"line_start":679,"line_end":679,"column_start":12,"column_end":25},"name":"OccupiedEntry","qualname":"::map::OccupiedEntry","value":"OccupiedEntry {  }","parent":null,"children":[{"krate":0,"index":217},{"krate":0,"index":218},{"krate":0,"index":219},{"krate":0,"index":220}],"decl_id":null,"docs":" A view into an occupied entry in a `IndexMap`.\n It is part of the [`Entry`] enum.","sig":null,"attributes":[{"value":"/ A view into an occupied entry in a `IndexMap`.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":29628,"byte_end":29678,"line_start":675,"line_end":675,"column_start":1,"column_end":51}},{"value":"/ It is part of the [`Entry`] enum.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":29679,"byte_end":29716,"line_start":676,"line_end":676,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":29717,"byte_end":29720,"line_start":677,"line_end":677,"column_start":1,"column_end":4}},{"value":"/ [`Entry`]: enum.Entry.html","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":29721,"byte_end":29751,"line_start":678,"line_end":678,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":225},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":29937,"byte_end":29940,"line_start":687,"line_end":687,"column_start":12,"column_end":15},"name":"key","qualname":"<OccupiedEntry>::key","value":"pub fn key(&Self) -> &K","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":226},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":29991,"byte_end":29994,"line_start":690,"line_end":690,"column_start":12,"column_end":15},"name":"get","qualname":"<OccupiedEntry>::get","value":"pub fn get(&Self) -> &V","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":227},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":30071,"byte_end":30078,"line_start":693,"line_end":693,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<OccupiedEntry>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut V","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":229},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":30418,"byte_end":30423,"line_start":704,"line_end":704,"column_start":12,"column_end":17},"name":"index","qualname":"<OccupiedEntry>::index","value":"pub fn index(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the index of the key-value pair\n","sig":null,"attributes":[{"value":"/ Return the index of the key-value pair","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":30364,"byte_end":30406,"line_start":703,"line_end":703,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":230},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":30478,"byte_end":30486,"line_start":707,"line_end":707,"column_start":12,"column_end":20},"name":"into_mut","qualname":"<OccupiedEntry>::into_mut","value":"pub fn into_mut(Self) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":231},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":30657,"byte_end":30663,"line_start":712,"line_end":712,"column_start":12,"column_end":18},"name":"insert","qualname":"<OccupiedEntry>::insert","value":"pub fn insert(&mut Self, V) -> V","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry to `value`, and returns the entry's old value.\n","sig":null,"attributes":[{"value":"/ Sets the value of the entry to `value`, and returns the entry's old value.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":30567,"byte_end":30645,"line_start":711,"line_end":711,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":232},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":30906,"byte_end":30912,"line_start":719,"line_end":719,"column_start":12,"column_end":18},"name":"remove","qualname":"<OccupiedEntry>::remove","value":"pub fn remove(Self) -> V","parent":null,"children":[],"decl_id":null,"docs":" Remove the key, value pair stored in the map for this entry, and return the value.","sig":null,"attributes":[{"value":"/ Remove the key, value pair stored in the map for this entry, and return the value.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":30742,"byte_end":30828,"line_start":716,"line_end":716,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":30833,"byte_end":30836,"line_start":717,"line_end":717,"column_start":5,"column_end":8}},{"value":"/ **NOTE:** This is equivalent to `.swap_remove()`.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":30841,"byte_end":30894,"line_start":718,"line_end":718,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":233},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":31327,"byte_end":31338,"line_start":730,"line_end":730,"column_start":12,"column_end":23},"name":"swap_remove","qualname":"<OccupiedEntry>::swap_remove","value":"pub fn swap_remove(Self) -> V","parent":null,"children":[],"decl_id":null,"docs":" Remove the key, value pair stored in the map for this entry, and return the value.","sig":null,"attributes":[{"value":"/ Remove the key, value pair stored in the map for this entry, and return the value.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":30964,"byte_end":31050,"line_start":723,"line_end":723,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":31055,"byte_end":31058,"line_start":724,"line_end":724,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the pair is removed by swapping it with the","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":31063,"byte_end":31135,"line_start":725,"line_end":725,"column_start":5,"column_end":77}},{"value":"/ last element of the map and popping it off. **This perturbs","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":31140,"byte_end":31203,"line_start":726,"line_end":726,"column_start":5,"column_end":68}},{"value":"/ the postion of what used to be the last element!**","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":31208,"byte_end":31262,"line_start":727,"line_end":727,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":31267,"byte_end":31270,"line_start":728,"line_end":728,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":31275,"byte_end":31315,"line_start":729,"line_end":729,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":234},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":31756,"byte_end":31768,"line_start":741,"line_end":741,"column_start":12,"column_end":24},"name":"shift_remove","qualname":"<OccupiedEntry>::shift_remove","value":"pub fn shift_remove(Self) -> V","parent":null,"children":[],"decl_id":null,"docs":" Remove the key, value pair stored in the map for this entry, and return the value.","sig":null,"attributes":[{"value":"/ Remove the key, value pair stored in the map for this entry, and return the value.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":31398,"byte_end":31484,"line_start":734,"line_end":734,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":31489,"byte_end":31492,"line_start":735,"line_end":735,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the pair is removed by shifting all of the","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":31497,"byte_end":31563,"line_start":736,"line_end":736,"column_start":5,"column_end":71}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":31568,"byte_end":31629,"line_start":737,"line_end":737,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":31634,"byte_end":31691,"line_start":738,"line_end":738,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":31696,"byte_end":31699,"line_start":739,"line_end":739,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":31704,"byte_end":31744,"line_start":740,"line_end":740,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":235},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":31987,"byte_end":31999,"line_start":748,"line_end":748,"column_start":12,"column_end":24},"name":"remove_entry","qualname":"<OccupiedEntry>::remove_entry","value":"pub fn remove_entry(Self) -> (K, V)","parent":null,"children":[],"decl_id":null,"docs":" Remove and return the key, value pair stored in the map for this entry","sig":null,"attributes":[{"value":"/ Remove and return the key, value pair stored in the map for this entry","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":31829,"byte_end":31903,"line_start":745,"line_end":745,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":31908,"byte_end":31911,"line_start":746,"line_end":746,"column_start":5,"column_end":8}},{"value":"/ **NOTE:** This is equivalent to `.swap_remove_entry()`.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":31916,"byte_end":31975,"line_start":747,"line_end":747,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":236},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":32413,"byte_end":32430,"line_start":759,"line_end":759,"column_start":12,"column_end":29},"name":"swap_remove_entry","qualname":"<OccupiedEntry>::swap_remove_entry","value":"pub fn swap_remove_entry(Self) -> (K, V)","parent":null,"children":[],"decl_id":null,"docs":" Remove and return the key, value pair stored in the map for this entry","sig":null,"attributes":[{"value":"/ Remove and return the key, value pair stored in the map for this entry","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":32062,"byte_end":32136,"line_start":752,"line_end":752,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":32141,"byte_end":32144,"line_start":753,"line_end":753,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the pair is removed by swapping it with the","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":32149,"byte_end":32221,"line_start":754,"line_end":754,"column_start":5,"column_end":77}},{"value":"/ last element of the map and popping it off. **This perturbs","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":32226,"byte_end":32289,"line_start":755,"line_end":755,"column_start":5,"column_end":68}},{"value":"/ the postion of what used to be the last element!**","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":32294,"byte_end":32348,"line_start":756,"line_end":756,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":32353,"byte_end":32356,"line_start":757,"line_end":757,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":32361,"byte_end":32401,"line_start":758,"line_end":758,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":237},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":32865,"byte_end":32883,"line_start":770,"line_end":770,"column_start":12,"column_end":30},"name":"shift_remove_entry","qualname":"<OccupiedEntry>::shift_remove_entry","value":"pub fn shift_remove_entry(Self) -> (K, V)","parent":null,"children":[],"decl_id":null,"docs":" Remove and return the key, value pair stored in the map for this entry","sig":null,"attributes":[{"value":"/ Remove and return the key, value pair stored in the map for this entry","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":32519,"byte_end":32593,"line_start":763,"line_end":763,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":32598,"byte_end":32601,"line_start":764,"line_end":764,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the pair is removed by shifting all of the","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":32606,"byte_end":32672,"line_start":765,"line_end":765,"column_start":5,"column_end":71}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":32677,"byte_end":32738,"line_start":766,"line_end":766,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":32743,"byte_end":32800,"line_start":767,"line_end":767,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":32805,"byte_end":32808,"line_start":768,"line_end":768,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":32813,"byte_end":32853,"line_start":769,"line_end":769,"column_start":5,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":243},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":33411,"byte_end":33422,"line_start":788,"line_end":788,"column_start":12,"column_end":23},"name":"VacantEntry","qualname":"::map::VacantEntry","value":"VacantEntry {  }","parent":null,"children":[{"krate":0,"index":247},{"krate":0,"index":248},{"krate":0,"index":249},{"krate":0,"index":250}],"decl_id":null,"docs":" A view into a vacant entry in a `IndexMap`.\n It is part of the [`Entry`] enum.","sig":null,"attributes":[{"value":"/ A view into a vacant entry in a `IndexMap`.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":33279,"byte_end":33326,"line_start":784,"line_end":784,"column_start":1,"column_end":48}},{"value":"/ It is part of the [`Entry`] enum.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":33327,"byte_end":33364,"line_start":785,"line_end":785,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":33365,"byte_end":33368,"line_start":786,"line_end":786,"column_start":1,"column_end":4}},{"value":"/ [`Entry`]: enum.Entry.html","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":33369,"byte_end":33399,"line_start":787,"line_end":787,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":255},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":33584,"byte_end":33587,"line_start":796,"line_end":796,"column_start":12,"column_end":15},"name":"key","qualname":"<VacantEntry>::key","value":"pub fn key(&Self) -> &K","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":256},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":33638,"byte_end":33646,"line_start":799,"line_end":799,"column_start":12,"column_end":20},"name":"into_key","qualname":"<VacantEntry>::into_key","value":"pub fn into_key(Self) -> K","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":257},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":33762,"byte_end":33767,"line_start":803,"line_end":803,"column_start":12,"column_end":17},"name":"index","qualname":"<VacantEntry>::index","value":"pub fn index(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the index where the key-value pair will be inserted.\n","sig":null,"attributes":[{"value":"/ Return the index where the key-value pair will be inserted.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":33687,"byte_end":33750,"line_start":802,"line_end":802,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":258},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":33826,"byte_end":33832,"line_start":806,"line_end":806,"column_start":12,"column_end":18},"name":"insert","qualname":"<VacantEntry>::insert","value":"pub fn insert(Self, V) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":272},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":35181,"byte_end":35186,"line_start":855,"line_end":855,"column_start":12,"column_end":17},"name":"clear","qualname":"<IndexMap<K, V, S>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Remove all key-value pairs in the map, while preserving its capacity.","sig":null,"attributes":[{"value":"/ Remove all key-value pairs in the map, while preserving its capacity.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":35053,"byte_end":35126,"line_start":852,"line_end":852,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":35131,"byte_end":35134,"line_start":853,"line_end":853,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":35139,"byte_end":35169,"line_start":854,"line_end":854,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":273},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":35358,"byte_end":35365,"line_start":862,"line_end":862,"column_start":12,"column_end":19},"name":"reserve","qualname":"<IndexMap<K, V, S>>::reserve","value":"pub fn reserve(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Reserve capacity for `additional` more key-value pairs.","sig":null,"attributes":[{"value":"/ Reserve capacity for `additional` more key-value pairs.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":35238,"byte_end":35297,"line_start":859,"line_end":859,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":35302,"byte_end":35305,"line_start":860,"line_end":860,"column_start":5,"column_end":8}},{"value":"/ FIXME Not implemented fully yet.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":35310,"byte_end":35346,"line_start":861,"line_end":861,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":279},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":36942,"byte_end":36948,"line_start":906,"line_end":906,"column_start":12,"column_end":18},"name":"insert","qualname":"<IndexMap<K, V, S>>::insert","value":"pub fn insert(&mut Self, K, V) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Insert a key-value pair in the map.","sig":null,"attributes":[{"value":"/ Insert a key-value pair in the map.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":36290,"byte_end":36329,"line_start":893,"line_end":893,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":36334,"byte_end":36337,"line_start":894,"line_end":894,"column_start":5,"column_end":8}},{"value":"/ If an equivalent key already exists in the map: the key remains and","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":36342,"byte_end":36413,"line_start":895,"line_end":895,"column_start":5,"column_end":76}},{"value":"/ retains in its place in the order, its corresponding value is updated","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":36418,"byte_end":36491,"line_start":896,"line_end":896,"column_start":5,"column_end":78}},{"value":"/ with `value` and the older value is returned inside `Some(_)`.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":36496,"byte_end":36562,"line_start":897,"line_end":897,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":36567,"byte_end":36570,"line_start":898,"line_end":898,"column_start":5,"column_end":8}},{"value":"/ If no equivalent key existed in the map: the new key-value pair is","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":36575,"byte_end":36645,"line_start":899,"line_end":899,"column_start":5,"column_end":75}},{"value":"/ inserted, last in order, and `None` is returned.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":36650,"byte_end":36702,"line_start":900,"line_end":900,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":36707,"byte_end":36710,"line_start":901,"line_end":901,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (amortized average).","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":36715,"byte_end":36765,"line_start":902,"line_end":902,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":36770,"byte_end":36773,"line_start":903,"line_end":903,"column_start":5,"column_end":8}},{"value":"/ See also [`entry`](#method.entry) if you you want to insert *or* modify","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":36778,"byte_end":36853,"line_start":904,"line_end":904,"column_start":5,"column_end":80}},{"value":"/ or if you need to get the index of the corresponding key-value pair.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":36858,"byte_end":36930,"line_start":905,"line_end":905,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":280},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":38500,"byte_end":38511,"line_start":942,"line_end":942,"column_start":12,"column_end":23},"name":"insert_full","qualname":"<IndexMap<K, V, S>>::insert_full","value":"pub fn insert_full(&mut Self, K, V) -> (usize, Option<V>)","parent":null,"children":[],"decl_id":null,"docs":" Insert a key-value pair in the map, and get their index.","sig":null,"attributes":[{"value":"/ Insert a key-value pair in the map, and get their index.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":37809,"byte_end":37869,"line_start":929,"line_end":929,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":37874,"byte_end":37877,"line_start":930,"line_end":930,"column_start":5,"column_end":8}},{"value":"/ If an equivalent key already exists in the map: the key remains and","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":37882,"byte_end":37953,"line_start":931,"line_end":931,"column_start":5,"column_end":76}},{"value":"/ retains in its place in the order, its corresponding value is updated","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":37958,"byte_end":38031,"line_start":932,"line_end":932,"column_start":5,"column_end":78}},{"value":"/ with `value` and the older value is returned inside `(index, Some(_))`.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":38036,"byte_end":38111,"line_start":933,"line_end":933,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":38116,"byte_end":38119,"line_start":934,"line_end":934,"column_start":5,"column_end":8}},{"value":"/ If no equivalent key existed in the map: the new key-value pair is","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":38124,"byte_end":38194,"line_start":935,"line_end":935,"column_start":5,"column_end":75}},{"value":"/ inserted, last in order, and `(index, None)` is returned.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":38199,"byte_end":38260,"line_start":936,"line_end":936,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":38265,"byte_end":38268,"line_start":937,"line_end":937,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (amortized average).","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":38273,"byte_end":38323,"line_start":938,"line_end":938,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":38328,"byte_end":38331,"line_start":939,"line_end":939,"column_start":5,"column_end":8}},{"value":"/ See also [`entry`](#method.entry) if you you want to insert *or* modify","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":38336,"byte_end":38411,"line_start":940,"line_end":940,"column_start":5,"column_end":80}},{"value":"/ or if you need to get the index of the corresponding key-value pair.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":38416,"byte_end":38488,"line_start":941,"line_end":941,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":281},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":39061,"byte_end":39066,"line_start":959,"line_end":959,"column_start":12,"column_end":17},"name":"entry","qualname":"<IndexMap<K, V, S>>::entry","value":"pub fn entry(&mut Self, K) -> Entry<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Get the given key’s corresponding entry in the map for insertion and/or\n in-place manipulation.","sig":null,"attributes":[{"value":"/ Get the given key’s corresponding entry in the map for insertion and/or","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":38878,"byte_end":38955,"line_start":955,"line_end":955,"column_start":5,"column_end":80}},{"value":"/ in-place manipulation.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":38960,"byte_end":38986,"line_start":956,"line_end":956,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":38991,"byte_end":38994,"line_start":957,"line_end":957,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (amortized average).","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":38999,"byte_end":39049,"line_start":958,"line_end":958,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":282},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":39280,"byte_end":39284,"line_start":965,"line_end":965,"column_start":12,"column_end":16},"name":"iter","qualname":"<IndexMap<K, V, S>>::iter","value":"pub fn iter(&Self) -> Iter<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the key-value pairs of the map, in their order\n","sig":null,"attributes":[{"value":"/ Return an iterator over the key-value pairs of the map, in their order","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":39194,"byte_end":39268,"line_start":964,"line_end":964,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":283},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":39474,"byte_end":39482,"line_start":972,"line_end":972,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<IndexMap<K, V, S>>::iter_mut","value":"pub fn iter_mut(&mut Self) -> IterMut<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the key-value pairs of the map, in their order\n","sig":null,"attributes":[{"value":"/ Return an iterator over the key-value pairs of the map, in their order","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":39388,"byte_end":39462,"line_start":971,"line_end":971,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":284},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":39675,"byte_end":39679,"line_start":979,"line_end":979,"column_start":12,"column_end":16},"name":"keys","qualname":"<IndexMap<K, V, S>>::keys","value":"pub fn keys(&Self) -> Keys<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the keys of the map, in their order\n","sig":null,"attributes":[{"value":"/ Return an iterator over the keys of the map, in their order","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":39600,"byte_end":39663,"line_start":978,"line_end":978,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":285},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":39860,"byte_end":39866,"line_start":986,"line_end":986,"column_start":12,"column_end":18},"name":"values","qualname":"<IndexMap<K, V, S>>::values","value":"pub fn values(&Self) -> Values<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the values of the map, in their order\n","sig":null,"attributes":[{"value":"/ Return an iterator over the values of the map, in their order","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":39783,"byte_end":39848,"line_start":985,"line_end":985,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":286},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":40085,"byte_end":40095,"line_start":994,"line_end":994,"column_start":12,"column_end":22},"name":"values_mut","qualname":"<IndexMap<K, V, S>>::values_mut","value":"pub fn values_mut(&mut Self) -> ValuesMut<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over mutable references to the the values of the map,\n in their order\n","sig":null,"attributes":[{"value":"/ Return an iterator over mutable references to the the values of the map,","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":39974,"byte_end":40050,"line_start":992,"line_end":992,"column_start":5,"column_end":81}},{"value":"/ in their order","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":40055,"byte_end":40073,"line_start":993,"line_end":993,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":287},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":40344,"byte_end":40356,"line_start":1003,"line_end":1003,"column_start":12,"column_end":24},"name":"contains_key","qualname":"<IndexMap<K, V, S>>::contains_key","value":"pub fn contains_key<Q: ?Sized>(&Self, &Q) -> bool where Q: Hash +\nEquivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Return `true` if an equivalent to `key` exists in the map.","sig":null,"attributes":[{"value":"/ Return `true` if an equivalent to `key` exists in the map.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":40217,"byte_end":40279,"line_start":1000,"line_end":1000,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":40284,"byte_end":40287,"line_start":1001,"line_end":1001,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":40292,"byte_end":40332,"line_start":1002,"line_end":1002,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":289},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":40642,"byte_end":40645,"line_start":1014,"line_end":1014,"column_start":12,"column_end":15},"name":"get","qualname":"<IndexMap<K, V, S>>::get","value":"pub fn get<Q: ?Sized>(&Self, &Q) -> Option<&V> where Q: Hash + Equivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the value stored for `key`, if it is present,\n else `None`.","sig":null,"attributes":[{"value":"/ Return a reference to the value stored for `key`, if it is present,","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":40485,"byte_end":40556,"line_start":1010,"line_end":1010,"column_start":5,"column_end":76}},{"value":"/ else `None`.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":40561,"byte_end":40577,"line_start":1011,"line_end":1011,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":40582,"byte_end":40585,"line_start":1012,"line_end":1012,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":40590,"byte_end":40630,"line_start":1013,"line_end":1013,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":291},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":40833,"byte_end":40841,"line_start":1022,"line_end":1022,"column_start":12,"column_end":20},"name":"get_full","qualname":"<IndexMap<K, V, S>>::get_full","value":"pub fn get_full<Q: ?Sized>(&Self, &Q) -> Option<(usize, &K, &V)> where\nQ: Hash + Equivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Return item index, key and value\n","sig":null,"attributes":[{"value":"/ Return item index, key and value","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":40785,"byte_end":40821,"line_start":1021,"line_end":1021,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":293},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":41215,"byte_end":41227,"line_start":1035,"line_end":1035,"column_start":12,"column_end":24},"name":"get_index_of","qualname":"<IndexMap<K, V, S>>::get_index_of","value":"pub fn get_index_of<Q: ?Sized>(&Self, &Q) -> Option<usize> where Q: Hash +\nEquivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Return item index, if it exists in the map\n","sig":null,"attributes":[{"value":"/ Return item index, if it exists in the map","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":41157,"byte_end":41203,"line_start":1034,"line_end":1034,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":295},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":41458,"byte_end":41465,"line_start":1046,"line_end":1046,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<IndexMap<K, V, S>>::get_mut","value":"pub fn get_mut<Q: ?Sized>(&mut Self, &Q) -> Option<&mut V> where Q: Hash +\nEquivalent<K>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":297},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":41624,"byte_end":41636,"line_start":1053,"line_end":1053,"column_start":12,"column_end":24},"name":"get_full_mut","qualname":"<IndexMap<K, V, S>>::get_full_mut","value":"pub fn get_full_mut<Q: ?Sized>(&mut Self, &Q) -> Option<(usize, &K, &mut V)>\nwhere Q: Hash + Equivalent<K>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":305},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":42936,"byte_end":42942,"line_start":1096,"line_end":1096,"column_start":12,"column_end":18},"name":"remove","qualname":"<IndexMap<K, V, S>>::remove","value":"pub fn remove<Q: ?Sized>(&mut Self, &Q) -> Option<V> where Q: Hash +\nEquivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair equivalent to `key` and return\n its value.","sig":null,"attributes":[{"value":"/ Remove the key-value pair equivalent to `key` and return","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":42615,"byte_end":42675,"line_start":1088,"line_end":1088,"column_start":5,"column_end":65}},{"value":"/ its value.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":42680,"byte_end":42694,"line_start":1089,"line_end":1089,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":42699,"byte_end":42702,"line_start":1090,"line_end":1090,"column_start":5,"column_end":8}},{"value":"/ **NOTE:** This is equivalent to `.swap_remove(key)`, if you need to","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":42707,"byte_end":42778,"line_start":1091,"line_end":1091,"column_start":5,"column_end":76}},{"value":"/ preserve the order of the keys in the map, use `.shift_remove(key)`","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":42783,"byte_end":42854,"line_start":1092,"line_end":1092,"column_start":5,"column_end":76}},{"value":"/ instead.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":42859,"byte_end":42871,"line_start":1093,"line_end":1093,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":42876,"byte_end":42879,"line_start":1094,"line_end":1094,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":42884,"byte_end":42924,"line_start":1095,"line_end":1095,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":307},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":43487,"byte_end":43498,"line_start":1113,"line_end":1113,"column_start":12,"column_end":23},"name":"swap_remove","qualname":"<IndexMap<K, V, S>>::swap_remove","value":"pub fn swap_remove<Q: ?Sized>(&mut Self, &Q) -> Option<V> where Q: Hash +\nEquivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair equivalent to `key` and return\n its value.","sig":null,"attributes":[{"value":"/ Remove the key-value pair equivalent to `key` and return","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":43077,"byte_end":43137,"line_start":1103,"line_end":1103,"column_start":5,"column_end":65}},{"value":"/ its value.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":43142,"byte_end":43156,"line_start":1104,"line_end":1104,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":43161,"byte_end":43164,"line_start":1105,"line_end":1105,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the pair is removed by swapping it with the","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":43169,"byte_end":43241,"line_start":1106,"line_end":1106,"column_start":5,"column_end":77}},{"value":"/ last element of the map and popping it off. **This perturbs","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":43246,"byte_end":43309,"line_start":1107,"line_end":1107,"column_start":5,"column_end":68}},{"value":"/ the postion of what used to be the last element!**","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":43314,"byte_end":43368,"line_start":1108,"line_end":1108,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":43373,"byte_end":43376,"line_start":1109,"line_end":1109,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `key` is not in map.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":43381,"byte_end":43422,"line_start":1110,"line_end":1110,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":43427,"byte_end":43430,"line_start":1111,"line_end":1111,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":43435,"byte_end":43475,"line_start":1112,"line_end":1112,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":309},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":44073,"byte_end":44089,"line_start":1130,"line_end":1130,"column_start":12,"column_end":28},"name":"swap_remove_full","qualname":"<IndexMap<K, V, S>>::swap_remove_full","value":"pub fn swap_remove_full<Q: ?Sized>(&mut Self, &Q) -> Option<(usize, K, V)>\nwhere Q: Hash + Equivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair equivalent to `key` and return it and\n the index it had.","sig":null,"attributes":[{"value":"/ Remove the key-value pair equivalent to `key` and return it and","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":43649,"byte_end":43716,"line_start":1120,"line_end":1120,"column_start":5,"column_end":72}},{"value":"/ the index it had.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":43721,"byte_end":43742,"line_start":1121,"line_end":1121,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":43747,"byte_end":43750,"line_start":1122,"line_end":1122,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the pair is removed by swapping it with the","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":43755,"byte_end":43827,"line_start":1123,"line_end":1123,"column_start":5,"column_end":77}},{"value":"/ last element of the map and popping it off. **This perturbs","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":43832,"byte_end":43895,"line_start":1124,"line_end":1124,"column_start":5,"column_end":68}},{"value":"/ the postion of what used to be the last element!**","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":43900,"byte_end":43954,"line_start":1125,"line_end":1125,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":43959,"byte_end":43962,"line_start":1126,"line_end":1126,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `key` is not in map.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":43967,"byte_end":44008,"line_start":1127,"line_end":1127,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":44013,"byte_end":44016,"line_start":1128,"line_end":1128,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":44021,"byte_end":44061,"line_start":1129,"line_end":1129,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":311},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":44825,"byte_end":44837,"line_start":1152,"line_end":1152,"column_start":12,"column_end":24},"name":"shift_remove","qualname":"<IndexMap<K, V, S>>::shift_remove","value":"pub fn shift_remove<Q: ?Sized>(&mut Self, &Q) -> Option<V> where Q: Hash +\nEquivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair equivalent to `key` and return\n its value.","sig":null,"attributes":[{"value":"/ Remove the key-value pair equivalent to `key` and return","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":44420,"byte_end":44480,"line_start":1142,"line_end":1142,"column_start":5,"column_end":65}},{"value":"/ its value.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":44485,"byte_end":44499,"line_start":1143,"line_end":1143,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":44504,"byte_end":44507,"line_start":1144,"line_end":1144,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the pair is removed by shifting all of the","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":44512,"byte_end":44578,"line_start":1145,"line_end":1145,"column_start":5,"column_end":71}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":44583,"byte_end":44644,"line_start":1146,"line_end":1146,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":44649,"byte_end":44706,"line_start":1147,"line_end":1147,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":44711,"byte_end":44714,"line_start":1148,"line_end":1148,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `key` is not in map.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":44719,"byte_end":44760,"line_start":1149,"line_end":1149,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":44765,"byte_end":44768,"line_start":1150,"line_end":1150,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":44773,"byte_end":44813,"line_start":1151,"line_end":1151,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":313},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":45408,"byte_end":45425,"line_start":1169,"line_end":1169,"column_start":12,"column_end":29},"name":"shift_remove_full","qualname":"<IndexMap<K, V, S>>::shift_remove_full","value":"pub fn shift_remove_full<Q: ?Sized>(&mut Self, &Q) -> Option<(usize, K, V)>\nwhere Q: Hash + Equivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair equivalent to `key` and return it and\n the index it had.","sig":null,"attributes":[{"value":"/ Remove the key-value pair equivalent to `key` and return it and","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":44989,"byte_end":45056,"line_start":1159,"line_end":1159,"column_start":5,"column_end":72}},{"value":"/ the index it had.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":45061,"byte_end":45082,"line_start":1160,"line_end":1160,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":45087,"byte_end":45090,"line_start":1161,"line_end":1161,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the pair is removed by shifting all of the","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":45095,"byte_end":45161,"line_start":1162,"line_end":1162,"column_start":5,"column_end":71}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":45166,"byte_end":45227,"line_start":1163,"line_end":1163,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":45232,"byte_end":45289,"line_start":1164,"line_end":1164,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":45294,"byte_end":45297,"line_start":1165,"line_end":1165,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `key` is not in map.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":45302,"byte_end":45343,"line_start":1166,"line_end":1166,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":45348,"byte_end":45351,"line_start":1167,"line_end":1167,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":45356,"byte_end":45396,"line_start":1168,"line_end":1168,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":315},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":45856,"byte_end":45859,"line_start":1184,"line_end":1184,"column_start":12,"column_end":15},"name":"pop","qualname":"<IndexMap<K, V, S>>::pop","value":"pub fn pop(&mut Self) -> Option<(K, V)>","parent":null,"children":[],"decl_id":null,"docs":" Remove the last key-value pair","sig":null,"attributes":[{"value":"/ Remove the last key-value pair","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":45757,"byte_end":45791,"line_start":1181,"line_end":1181,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":45796,"byte_end":45799,"line_start":1182,"line_end":1182,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":45804,"byte_end":45844,"line_start":1183,"line_end":1183,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":316},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":46207,"byte_end":46213,"line_start":1195,"line_end":1195,"column_start":12,"column_end":18},"name":"retain","qualname":"<IndexMap<K, V, S>>::retain","value":"pub fn retain<F>(&mut Self, F) where F: FnMut(&K, &mut V) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Scan through each key-value pair in the map and keep those where the\n closure `keep` returns `true`.","sig":null,"attributes":[{"value":"/ Scan through each key-value pair in the map and keep those where the","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":45931,"byte_end":46003,"line_start":1188,"line_end":1188,"column_start":5,"column_end":77}},{"value":"/ closure `keep` returns `true`.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":46008,"byte_end":46042,"line_start":1189,"line_end":1189,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":46047,"byte_end":46050,"line_start":1190,"line_end":1190,"column_start":5,"column_end":8}},{"value":"/ The elements are visited in order, and remaining elements keep their","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":46055,"byte_end":46127,"line_start":1191,"line_end":1191,"column_start":5,"column_end":77}},{"value":"/ order.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":46132,"byte_end":46142,"line_start":1192,"line_end":1192,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":46147,"byte_end":46150,"line_start":1193,"line_end":1193,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":46155,"byte_end":46195,"line_start":1194,"line_end":1194,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":324},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":46845,"byte_end":46854,"line_start":1220,"line_end":1220,"column_start":12,"column_end":21},"name":"sort_keys","qualname":"<IndexMap<K, V, S>>::sort_keys","value":"pub fn sort_keys(&mut Self) where K: Ord","parent":null,"children":[],"decl_id":null,"docs":" Sort the map’s key-value pairs by the default ordering of the keys.","sig":null,"attributes":[{"value":"/ Sort the map’s key-value pairs by the default ordering of the keys.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":46717,"byte_end":46790,"line_start":1217,"line_end":1217,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":46795,"byte_end":46798,"line_start":1218,"line_end":1218,"column_start":5,"column_end":8}},{"value":"/ See `sort_by` for details.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":46803,"byte_end":46833,"line_start":1219,"line_end":1219,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":325},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":47363,"byte_end":47370,"line_start":1235,"line_end":1235,"column_start":12,"column_end":19},"name":"sort_by","qualname":"<IndexMap<K, V, S>>::sort_by","value":"pub fn sort_by<F>(&mut Self, F) where F: FnMut(&K, &V, &K, &V) -> Ordering","parent":null,"children":[],"decl_id":null,"docs":" Sort the map’s key-value pairs in place using the comparison\n function `compare`.","sig":null,"attributes":[{"value":"/ Sort the map’s key-value pairs in place using the comparison","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":46944,"byte_end":47010,"line_start":1227,"line_end":1227,"column_start":5,"column_end":69}},{"value":"/ function `compare`.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":47015,"byte_end":47038,"line_start":1228,"line_end":1228,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":47043,"byte_end":47046,"line_start":1229,"line_end":1229,"column_start":5,"column_end":8}},{"value":"/ The comparison function receives two key and value pairs to compare (you","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":47051,"byte_end":47127,"line_start":1230,"line_end":1230,"column_start":5,"column_end":81}},{"value":"/ can sort by keys or values or their combination as needed).","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":47132,"byte_end":47195,"line_start":1231,"line_end":1231,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":47200,"byte_end":47203,"line_start":1232,"line_end":1232,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n log n + c)** time and **O(n)** space where *n* is","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":47208,"byte_end":47279,"line_start":1233,"line_end":1233,"column_start":5,"column_end":76}},{"value":"/ the length of the map and *c* the capacity. The sort is stable.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":47284,"byte_end":47351,"line_start":1234,"line_end":1234,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":327},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":47671,"byte_end":47680,"line_start":1246,"line_end":1246,"column_start":12,"column_end":21},"name":"sorted_by","qualname":"<IndexMap<K, V, S>>::sorted_by","value":"pub fn sorted_by<F>(Self, F) -> IntoIter<K, V> where F: FnMut(&K, &V, &K, &V)\n-> Ordering","parent":null,"children":[],"decl_id":null,"docs":" Sort the key-value pairs of the map and return a by value iterator of\n the key-value pairs with the result.","sig":null,"attributes":[{"value":"/ Sort the key-value pairs of the map and return a by value iterator of","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":47505,"byte_end":47578,"line_start":1242,"line_end":1242,"column_start":5,"column_end":78}},{"value":"/ the key-value pairs with the result.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":47583,"byte_end":47623,"line_start":1243,"line_end":1243,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":47628,"byte_end":47631,"line_start":1244,"line_end":1244,"column_start":5,"column_end":8}},{"value":"/ The sort is stable.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":47636,"byte_end":47659,"line_start":1245,"line_end":1245,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":330},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":48071,"byte_end":48076,"line_start":1258,"line_end":1258,"column_start":12,"column_end":17},"name":"drain","qualname":"<IndexMap<K, V, S>>::drain","value":"pub fn drain(&mut Self, RangeFull) -> Drain<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Clears the `IndexMap`, returning all key-value pairs as a drain iterator.\n Keeps the allocated memory for reuse.\n","sig":null,"attributes":[{"value":"/ Clears the `IndexMap`, returning all key-value pairs as a drain iterator.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":47936,"byte_end":48013,"line_start":1256,"line_end":1256,"column_start":5,"column_end":82}},{"value":"/ Keeps the allocated memory for reuse.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":48018,"byte_end":48059,"line_start":1257,"line_end":1257,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":338},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":48537,"byte_end":48546,"line_start":1280,"line_end":1280,"column_start":12,"column_end":21},"name":"get_index","qualname":"<IndexMap<K, V, S>>::get_index","value":"pub fn get_index(&Self, usize) -> Option<(&K, &V)>","parent":null,"children":[],"decl_id":null,"docs":" Get a key-value pair by index","sig":null,"attributes":[{"value":"/ Get a key-value pair by index","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":48389,"byte_end":48422,"line_start":1275,"line_end":1275,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":48427,"byte_end":48430,"line_start":1276,"line_end":1276,"column_start":5,"column_end":8}},{"value":"/ Valid indices are *0 <= index < self.len()*","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":48435,"byte_end":48482,"line_start":1277,"line_end":1277,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":48487,"byte_end":48490,"line_start":1278,"line_end":1278,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":48495,"byte_end":48525,"line_start":1279,"line_end":1279,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":339},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":48804,"byte_end":48817,"line_start":1289,"line_end":1289,"column_start":12,"column_end":25},"name":"get_index_mut","qualname":"<IndexMap<K, V, S>>::get_index_mut","value":"pub fn get_index_mut(&mut Self, usize) -> Option<(&mut K, &mut V)>","parent":null,"children":[],"decl_id":null,"docs":" Get a key-value pair by index","sig":null,"attributes":[{"value":"/ Get a key-value pair by index","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":48656,"byte_end":48689,"line_start":1284,"line_end":1284,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":48694,"byte_end":48697,"line_start":1285,"line_end":1285,"column_start":5,"column_end":8}},{"value":"/ Valid indices are *0 <= index < self.len()*","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":48702,"byte_end":48749,"line_start":1286,"line_end":1286,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":48754,"byte_end":48757,"line_start":1287,"line_end":1287,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":48762,"byte_end":48792,"line_start":1288,"line_end":1288,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":340},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":49318,"byte_end":49335,"line_start":1302,"line_end":1302,"column_start":12,"column_end":29},"name":"swap_remove_index","qualname":"<IndexMap<K, V, S>>::swap_remove_index","value":"pub fn swap_remove_index(&mut Self, usize) -> Option<(K, V)>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair by index","sig":null,"attributes":[{"value":"/ Remove the key-value pair by index","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":48943,"byte_end":48981,"line_start":1293,"line_end":1293,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":48986,"byte_end":48989,"line_start":1294,"line_end":1294,"column_start":5,"column_end":8}},{"value":"/ Valid indices are *0 <= index < self.len()*","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":48994,"byte_end":49041,"line_start":1295,"line_end":1295,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":49046,"byte_end":49049,"line_start":1296,"line_end":1296,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the pair is removed by swapping it with the","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":49054,"byte_end":49126,"line_start":1297,"line_end":1297,"column_start":5,"column_end":77}},{"value":"/ last element of the map and popping it off. **This perturbs","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":49131,"byte_end":49194,"line_start":1298,"line_end":1298,"column_start":5,"column_end":68}},{"value":"/ the postion of what used to be the last element!**","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":49199,"byte_end":49253,"line_start":1299,"line_end":1299,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":49258,"byte_end":49261,"line_start":1300,"line_end":1300,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":49266,"byte_end":49306,"line_start":1301,"line_end":1301,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":342},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":50056,"byte_end":50074,"line_start":1324,"line_end":1324,"column_start":12,"column_end":30},"name":"shift_remove_index","qualname":"<IndexMap<K, V, S>>::shift_remove_index","value":"pub fn shift_remove_index(&mut Self, usize) -> Option<(K, V)>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair by index","sig":null,"attributes":[{"value":"/ Remove the key-value pair by index","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":49686,"byte_end":49724,"line_start":1315,"line_end":1315,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":49729,"byte_end":49732,"line_start":1316,"line_end":1316,"column_start":5,"column_end":8}},{"value":"/ Valid indices are *0 <= index < self.len()*","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":49737,"byte_end":49784,"line_start":1317,"line_end":1317,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":49789,"byte_end":49792,"line_start":1318,"line_end":1318,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the pair is removed by shifting all of the","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":49797,"byte_end":49863,"line_start":1319,"line_end":1319,"column_start":5,"column_end":71}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":49868,"byte_end":49929,"line_start":1320,"line_end":1320,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":49934,"byte_end":49991,"line_start":1321,"line_end":1321,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":49996,"byte_end":49999,"line_start":1322,"line_end":1322,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":50004,"byte_end":50044,"line_start":1323,"line_end":1323,"column_start":5,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":395},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":68549,"byte_end":68553,"line_start":1830,"line_end":1830,"column_start":12,"column_end":16},"name":"Keys","qualname":"::map::Keys","value":"Keys {  }","parent":null,"children":[{"krate":0,"index":399}],"decl_id":null,"docs":" An iterator over the keys of a `IndexMap`.","sig":null,"attributes":[{"value":"/ An iterator over the keys of a `IndexMap`.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":68292,"byte_end":68338,"line_start":1823,"line_end":1823,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":68339,"byte_end":68342,"line_start":1824,"line_end":1824,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`keys`] method on [`IndexMap`]. See its","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":68343,"byte_end":68419,"line_start":1825,"line_end":1825,"column_start":1,"column_end":77}},{"value":"/ documentation for more.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":68420,"byte_end":68447,"line_start":1826,"line_end":1826,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":68448,"byte_end":68451,"line_start":1827,"line_end":1827,"column_start":1,"column_end":4}},{"value":"/ [`keys`]: struct.IndexMap.html#method.keys","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":68452,"byte_end":68498,"line_start":1828,"line_end":1828,"column_start":1,"column_end":47}},{"value":"/ [`IndexMap`]: struct.IndexMap.html","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":68499,"byte_end":68537,"line_start":1829,"line_end":1829,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":425},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":69672,"byte_end":69678,"line_start":1874,"line_end":1874,"column_start":12,"column_end":18},"name":"Values","qualname":"::map::Values","value":"Values {  }","parent":null,"children":[{"krate":0,"index":429}],"decl_id":null,"docs":" An iterator over the values of a `IndexMap`.","sig":null,"attributes":[{"value":"/ An iterator over the values of a `IndexMap`.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":69407,"byte_end":69455,"line_start":1867,"line_end":1867,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":69456,"byte_end":69459,"line_start":1868,"line_end":1868,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`values`] method on [`IndexMap`]. See its","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":69460,"byte_end":69538,"line_start":1869,"line_end":1869,"column_start":1,"column_end":79}},{"value":"/ documentation for more.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":69539,"byte_end":69566,"line_start":1870,"line_end":1870,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":69567,"byte_end":69570,"line_start":1871,"line_end":1871,"column_start":1,"column_end":4}},{"value":"/ [`values`]: struct.IndexMap.html#method.values","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":69571,"byte_end":69621,"line_start":1872,"line_end":1872,"column_start":1,"column_end":51}},{"value":"/ [`IndexMap`]: struct.IndexMap.html","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":69622,"byte_end":69660,"line_start":1873,"line_end":1873,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":455},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":70828,"byte_end":70837,"line_start":1918,"line_end":1918,"column_start":12,"column_end":21},"name":"ValuesMut","qualname":"::map::ValuesMut","value":"ValuesMut {  }","parent":null,"children":[{"krate":0,"index":459}],"decl_id":null,"docs":" A mutable iterator over the values of a `IndexMap`.","sig":null,"attributes":[{"value":"/ A mutable iterator over the values of a `IndexMap`.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":70544,"byte_end":70599,"line_start":1911,"line_end":1911,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":70600,"byte_end":70603,"line_start":1912,"line_end":1912,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`values_mut`] method on [`IndexMap`]. See its","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":70604,"byte_end":70686,"line_start":1913,"line_end":1913,"column_start":1,"column_end":83}},{"value":"/ documentation for more.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":70687,"byte_end":70714,"line_start":1914,"line_end":1914,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":70715,"byte_end":70718,"line_start":1915,"line_end":1915,"column_start":1,"column_end":4}},{"value":"/ [`values_mut`]: struct.IndexMap.html#method.values_mut","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":70719,"byte_end":70777,"line_start":1916,"line_end":1916,"column_start":1,"column_end":59}},{"value":"/ [`IndexMap`]: struct.IndexMap.html","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":70778,"byte_end":70816,"line_start":1917,"line_end":1917,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":475},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":71582,"byte_end":71586,"line_start":1947,"line_end":1947,"column_start":12,"column_end":16},"name":"Iter","qualname":"::map::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":479}],"decl_id":null,"docs":" An iterator over the entries of a `IndexMap`.","sig":null,"attributes":[{"value":"/ An iterator over the entries of a `IndexMap`.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":71322,"byte_end":71371,"line_start":1940,"line_end":1940,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":71372,"byte_end":71375,"line_start":1941,"line_end":1941,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`iter`] method on [`IndexMap`]. See its","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":71376,"byte_end":71452,"line_start":1942,"line_end":1942,"column_start":1,"column_end":77}},{"value":"/ documentation for more.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":71453,"byte_end":71480,"line_start":1943,"line_end":1943,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":71481,"byte_end":71484,"line_start":1944,"line_end":1944,"column_start":1,"column_end":4}},{"value":"/ [`iter`]: struct.IndexMap.html#method.iter","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":71485,"byte_end":71531,"line_start":1945,"line_end":1945,"column_start":1,"column_end":47}},{"value":"/ [`IndexMap`]: struct.IndexMap.html","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":71532,"byte_end":71570,"line_start":1946,"line_end":1946,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":505},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":72728,"byte_end":72735,"line_start":1991,"line_end":1991,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::map::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":509}],"decl_id":null,"docs":" A mutable iterator over the entries of a `IndexMap`.","sig":null,"attributes":[{"value":"/ A mutable iterator over the entries of a `IndexMap`.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":72449,"byte_end":72505,"line_start":1984,"line_end":1984,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":72506,"byte_end":72509,"line_start":1985,"line_end":1985,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`iter_mut`] method on [`IndexMap`]. See its","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":72510,"byte_end":72590,"line_start":1986,"line_end":1986,"column_start":1,"column_end":81}},{"value":"/ documentation for more.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":72591,"byte_end":72618,"line_start":1987,"line_end":1987,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":72619,"byte_end":72622,"line_start":1988,"line_end":1988,"column_start":1,"column_end":4}},{"value":"/ [`iter_mut`]: struct.IndexMap.html#method.iter_mut","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":72623,"byte_end":72677,"line_start":1989,"line_end":1989,"column_start":1,"column_end":55}},{"value":"/ [`IndexMap`]: struct.IndexMap.html","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":72678,"byte_end":72716,"line_start":1990,"line_end":1990,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":525},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":73540,"byte_end":73548,"line_start":2020,"line_end":2020,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::map::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":528}],"decl_id":null,"docs":" An owning iterator over the entries of a `IndexMap`.","sig":null,"attributes":[{"value":"/ An owning iterator over the entries of a `IndexMap`.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":73219,"byte_end":73275,"line_start":2013,"line_end":2013,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":73276,"byte_end":73279,"line_start":2014,"line_end":2014,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`into_iter`] method on [`IndexMap`]","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":73280,"byte_end":73352,"line_start":2015,"line_end":2015,"column_start":1,"column_end":73}},{"value":"/ (provided by the `IntoIterator` trait). See its documentation for more.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":73353,"byte_end":73428,"line_start":2016,"line_end":2016,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":73429,"byte_end":73432,"line_start":2017,"line_end":2017,"column_start":1,"column_end":4}},{"value":"/ [`into_iter`]: struct.IndexMap.html#method.into_iter","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":73433,"byte_end":73489,"line_start":2018,"line_end":2018,"column_start":1,"column_end":57}},{"value":"/ [`IndexMap`]: struct.IndexMap.html","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":73490,"byte_end":73528,"line_start":2019,"line_end":2019,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":546},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":74519,"byte_end":74524,"line_start":2056,"line_end":2056,"column_start":12,"column_end":17},"name":"Drain","qualname":"::map::Drain","value":"Drain {  }","parent":null,"children":[{"krate":0,"index":550}],"decl_id":null,"docs":" A draining iterator over the entries of a `IndexMap`.","sig":null,"attributes":[{"value":"/ A draining iterator over the entries of a `IndexMap`.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":74248,"byte_end":74305,"line_start":2049,"line_end":2049,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":74306,"byte_end":74309,"line_start":2050,"line_end":2050,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`drain`] method on [`IndexMap`]. See its","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":74310,"byte_end":74387,"line_start":2051,"line_end":2051,"column_start":1,"column_end":78}},{"value":"/ documentation for more.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":74388,"byte_end":74415,"line_start":2052,"line_end":2052,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":74416,"byte_end":74419,"line_start":2053,"line_end":2053,"column_start":1,"column_end":4}},{"value":"/ [`drain`]: struct.IndexMap.html#method.drain","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":74420,"byte_end":74468,"line_start":2054,"line_end":2054,"column_start":1,"column_end":49}},{"value":"/ [`IndexMap`]: struct.IndexMap.html","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":74469,"byte_end":74507,"line_start":2055,"line_end":2055,"column_start":1,"column_end":39}}]},{"kind":"Mod","id":{"krate":0,"index":639},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"set","qualname":"::set","value":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","parent":null,"children":[{"krate":0,"index":640},{"krate":0,"index":641},{"krate":0,"index":642},{"krate":0,"index":643},{"krate":0,"index":644},{"krate":0,"index":645},{"krate":0,"index":1254},{"krate":0,"index":646},{"krate":0,"index":647},{"krate":0,"index":648},{"krate":0,"index":649},{"krate":0,"index":1260},{"krate":0,"index":650},{"krate":0,"index":651},{"krate":0,"index":652},{"krate":0,"index":653},{"krate":0,"index":654},{"krate":0,"index":655},{"krate":0,"index":656},{"krate":0,"index":1272},{"krate":0,"index":657},{"krate":0,"index":658},{"krate":0,"index":659},{"krate":0,"index":660},{"krate":0,"index":661},{"krate":0,"index":1131},{"krate":0,"index":1135},{"krate":0,"index":663},{"krate":0,"index":672},{"krate":0,"index":676},{"krate":0,"index":680},{"krate":0,"index":689},{"krate":0,"index":755},{"krate":0,"index":764},{"krate":0,"index":767},{"krate":0,"index":770},{"krate":0,"index":773},{"krate":0,"index":776},{"krate":0,"index":779},{"krate":0,"index":783},{"krate":0,"index":787},{"krate":0,"index":791},{"krate":0,"index":795},{"krate":0,"index":799},{"krate":0,"index":803},{"krate":0,"index":807},{"krate":0,"index":811},{"krate":0,"index":814},{"krate":0,"index":821},{"krate":0,"index":827},{"krate":0,"index":833},{"krate":0,"index":839},{"krate":0,"index":845},{"krate":0,"index":849},{"krate":0,"index":854},{"krate":0,"index":857},{"krate":0,"index":869},{"krate":0,"index":875},{"krate":0,"index":882},{"krate":0,"index":887},{"krate":0,"index":892},{"krate":0,"index":897},{"krate":0,"index":903},{"krate":0,"index":910},{"krate":0,"index":915},{"krate":0,"index":920},{"krate":0,"index":925},{"krate":0,"index":931},{"krate":0,"index":942},{"krate":0,"index":948},{"krate":0,"index":954},{"krate":0,"index":960},{"krate":0,"index":965},{"krate":0,"index":975},{"krate":0,"index":980},{"krate":0,"index":985},{"krate":0,"index":990},{"krate":0,"index":998},{"krate":0,"index":1006},{"krate":0,"index":1014}],"decl_id":null,"docs":" A hash set implemented using `IndexMap`\n","sig":null,"attributes":[{"value":"/ A hash set implemented using `IndexMap`","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":91243,"byte_end":91286,"line_start":1,"line_end":1,"column_start":1,"column_end":44}}]},{"kind":"Struct","id":{"krate":0,"index":1131},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":93367,"byte_end":93375,"line_start":68,"line_end":68,"column_start":12,"column_end":20},"name":"IndexSet","qualname":"::set::IndexSet","value":"IndexSet {  }","parent":null,"children":[{"krate":0,"index":1134}],"decl_id":null,"docs":" A hash set where the iteration order of the values is independent of their\n hash values.","sig":null,"attributes":[{"value":"/ A hash set where the iteration order of the values is independent of their","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":91744,"byte_end":91822,"line_start":25,"line_end":25,"column_start":1,"column_end":79}},{"value":"/ hash values.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":91823,"byte_end":91839,"line_start":26,"line_end":26,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":91840,"byte_end":91843,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ The interface is closely compatible with the standard `HashSet`, but also","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":91844,"byte_end":91921,"line_start":28,"line_end":28,"column_start":1,"column_end":78}},{"value":"/ has additional features.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":91922,"byte_end":91950,"line_start":29,"line_end":29,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":91951,"byte_end":91954,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ # Order","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":91955,"byte_end":91966,"line_start":31,"line_end":31,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":91967,"byte_end":91970,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ The values have a consistent order that is determined by the sequence of","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":91971,"byte_end":92047,"line_start":33,"line_end":33,"column_start":1,"column_end":77}},{"value":"/ insertion and removal calls on the set. The order does not depend on the","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":92048,"byte_end":92124,"line_start":34,"line_end":34,"column_start":1,"column_end":77}},{"value":"/ values or the hash function at all. Note that insertion order and value","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":92125,"byte_end":92200,"line_start":35,"line_end":35,"column_start":1,"column_end":76}},{"value":"/ are not affected if a re-insertion is attempted once an element is","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":92201,"byte_end":92271,"line_start":36,"line_end":36,"column_start":1,"column_end":71}},{"value":"/ already present.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":92272,"byte_end":92292,"line_start":37,"line_end":37,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":92293,"byte_end":92296,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ All iterators traverse the set *in order*.  Set operation iterators like","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":92297,"byte_end":92373,"line_start":39,"line_end":39,"column_start":1,"column_end":77}},{"value":"/ `union` produce a concatenated order, as do their matching \"bitwise\"","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":92374,"byte_end":92446,"line_start":40,"line_end":40,"column_start":1,"column_end":73}},{"value":"/ operators.  See their documentation for specifics.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":92447,"byte_end":92501,"line_start":41,"line_end":41,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":92502,"byte_end":92505,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ The insertion order is preserved, with **notable exceptions** like the","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":92506,"byte_end":92580,"line_start":43,"line_end":43,"column_start":1,"column_end":75}},{"value":"/ `.remove()` or `.swap_remove()` methods. Methods such as `.sort_by()` of","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":92581,"byte_end":92657,"line_start":44,"line_end":44,"column_start":1,"column_end":77}},{"value":"/ course result in a new order, depending on the sorting order.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":92658,"byte_end":92723,"line_start":45,"line_end":45,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":92724,"byte_end":92727,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ # Indices","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":92728,"byte_end":92741,"line_start":47,"line_end":47,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":92742,"byte_end":92745,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ The values are indexed in a compact range without holes in the range","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":92746,"byte_end":92818,"line_start":49,"line_end":49,"column_start":1,"column_end":73}},{"value":"/ `0..self.len()`. For example, the method `.get_full` looks up the index for","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":92819,"byte_end":92898,"line_start":50,"line_end":50,"column_start":1,"column_end":80}},{"value":"/ a value, and the method `.get_index` looks up the value by index.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":92899,"byte_end":92968,"line_start":51,"line_end":51,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":92969,"byte_end":92972,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":92973,"byte_end":92987,"line_start":53,"line_end":53,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":92988,"byte_end":92991,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":92992,"byte_end":92999,"line_start":55,"line_end":55,"column_start":1,"column_end":8}},{"value":"/ use indexmap::IndexSet;","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":93000,"byte_end":93027,"line_start":56,"line_end":56,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":93028,"byte_end":93031,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ // Collects which letters appear in a sentence.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":93032,"byte_end":93083,"line_start":58,"line_end":58,"column_start":1,"column_end":52}},{"value":"/ let letters: IndexSet<_> = \"a short treatise on fungi\".chars().collect();","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":93084,"byte_end":93161,"line_start":59,"line_end":59,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":93162,"byte_end":93165,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ assert!(letters.contains(&'s'));","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":93166,"byte_end":93202,"line_start":61,"line_end":61,"column_start":1,"column_end":37}},{"value":"/ assert!(letters.contains(&'t'));","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":93203,"byte_end":93239,"line_start":62,"line_end":62,"column_start":1,"column_end":37}},{"value":"/ assert!(letters.contains(&'u'));","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":93240,"byte_end":93276,"line_start":63,"line_end":63,"column_start":1,"column_end":37}},{"value":"/ assert!(!letters.contains(&'y'));","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":93277,"byte_end":93314,"line_start":64,"line_end":64,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":93315,"byte_end":93322,"line_start":65,"line_end":65,"column_start":1,"column_end":8}},{"value":"cfg(has_std)","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":93340,"byte_end":93355,"line_start":67,"line_end":67,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":678},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":94532,"byte_end":94535,"line_start":118,"line_end":118,"column_start":12,"column_end":15},"name":"new","qualname":"<IndexSet<T>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new set. (Does not allocate.)\n","sig":null,"attributes":[{"value":"/ Create a new set. (Does not allocate.)","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":94478,"byte_end":94520,"line_start":117,"line_end":117,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":679},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":94773,"byte_end":94786,"line_start":128,"line_end":128,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<IndexSet<T>>::with_capacity","value":"pub fn with_capacity(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new set with capacity for `n` elements.\n (Does not allocate if `n` is zero.)","sig":null,"attributes":[{"value":"/ Create a new set with capacity for `n` elements.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":94622,"byte_end":94674,"line_start":124,"line_end":124,"column_start":5,"column_end":57}},{"value":"/ (Does not allocate if `n` is zero.)","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":94679,"byte_end":94718,"line_start":125,"line_end":125,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":94723,"byte_end":94726,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":94731,"byte_end":94761,"line_start":127,"line_end":127,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":683},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":95073,"byte_end":95097,"line_start":140,"line_end":140,"column_start":12,"column_end":36},"name":"with_capacity_and_hasher","qualname":"<IndexSet<T, S>>::with_capacity_and_hasher","value":"pub fn with_capacity_and_hasher(usize, S) -> Self where S: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Create a new set with capacity for `n` elements.\n (Does not allocate if `n` is zero.)","sig":null,"attributes":[{"value":"/ Create a new set with capacity for `n` elements.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":94922,"byte_end":94974,"line_start":136,"line_end":136,"column_start":5,"column_end":57}},{"value":"/ (Does not allocate if `n` is zero.)","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":94979,"byte_end":95018,"line_start":137,"line_end":137,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":95023,"byte_end":95026,"line_start":138,"line_end":138,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":95031,"byte_end":95061,"line_start":139,"line_end":139,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":684},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":95383,"byte_end":95386,"line_start":152,"line_end":152,"column_start":12,"column_end":15},"name":"len","qualname":"<IndexSet<T, S>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the number of elements in the set.","sig":null,"attributes":[{"value":"/ Return the number of elements in the set.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":95283,"byte_end":95328,"line_start":149,"line_end":149,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":95333,"byte_end":95336,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":95341,"byte_end":95371,"line_start":151,"line_end":151,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":685},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":95543,"byte_end":95551,"line_start":159,"line_end":159,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<IndexSet<T, S>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the set contains no elements.","sig":null,"attributes":[{"value":"/ Returns true if the set contains no elements.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":95439,"byte_end":95488,"line_start":156,"line_end":156,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":95493,"byte_end":95496,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":95501,"byte_end":95531,"line_start":158,"line_end":158,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":686},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":95660,"byte_end":95671,"line_start":164,"line_end":164,"column_start":12,"column_end":23},"name":"with_hasher","qualname":"<IndexSet<T, S>>::with_hasher","value":"pub fn with_hasher(S) -> Self where S: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Create a new set with `hash_builder`\n","sig":null,"attributes":[{"value":"/ Create a new set with `hash_builder`","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":95608,"byte_end":95648,"line_start":163,"line_end":163,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":687},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":95893,"byte_end":95899,"line_start":174,"line_end":174,"column_start":12,"column_end":18},"name":"hasher","qualname":"<IndexSet<T, S>>::hasher","value":"pub fn hasher(&Self) -> &S where S: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the set's `BuildHasher`.\n","sig":null,"attributes":[{"value":"/ Return a reference to the set's `BuildHasher`.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":95831,"byte_end":95881,"line_start":173,"line_end":173,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":688},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":96032,"byte_end":96040,"line_start":182,"line_end":182,"column_start":12,"column_end":20},"name":"capacity","qualname":"<IndexSet<T, S>>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Computes in **O(1)** time.\n","sig":null,"attributes":[{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":95990,"byte_end":96020,"line_start":181,"line_end":181,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":692},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":96293,"byte_end":96298,"line_start":195,"line_end":195,"column_start":12,"column_end":17},"name":"clear","qualname":"<IndexSet<T, S>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Remove all elements in the set, while preserving its capacity.","sig":null,"attributes":[{"value":"/ Remove all elements in the set, while preserving its capacity.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":96172,"byte_end":96238,"line_start":192,"line_end":192,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":96243,"byte_end":96246,"line_start":193,"line_end":193,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":96251,"byte_end":96281,"line_start":194,"line_end":194,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":693},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":96396,"byte_end":96403,"line_start":200,"line_end":200,"column_start":12,"column_end":19},"name":"reserve","qualname":"<IndexSet<T, S>>::reserve","value":"pub fn reserve(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" FIXME Not implemented fully yet\n","sig":null,"attributes":[{"value":"/ FIXME Not implemented fully yet","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":96349,"byte_end":96384,"line_start":199,"line_end":199,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":694},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":96837,"byte_end":96843,"line_start":212,"line_end":212,"column_start":12,"column_end":18},"name":"insert","qualname":"<IndexSet<T, S>>::insert","value":"pub fn insert(&mut Self, T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Insert the value into the set.","sig":null,"attributes":[{"value":"/ Insert the value into the set.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":96485,"byte_end":96519,"line_start":204,"line_end":204,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":96524,"byte_end":96527,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ If an equivalent item already exists in the set, it returns","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":96532,"byte_end":96595,"line_start":206,"line_end":206,"column_start":5,"column_end":68}},{"value":"/ `false` leaving the original value in the set and without","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":96600,"byte_end":96661,"line_start":207,"line_end":207,"column_start":5,"column_end":66}},{"value":"/ altering its insertion order. Otherwise, it inserts the new","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":96666,"byte_end":96729,"line_start":208,"line_end":208,"column_start":5,"column_end":68}},{"value":"/ item and returns `true`.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":96734,"byte_end":96762,"line_start":209,"line_end":209,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":96767,"byte_end":96770,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (amortized average).","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":96775,"byte_end":96825,"line_start":211,"line_end":211,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":695},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":97381,"byte_end":97392,"line_start":225,"line_end":225,"column_start":12,"column_end":23},"name":"insert_full","qualname":"<IndexSet<T, S>>::insert_full","value":"pub fn insert_full(&mut Self, T) -> (usize, bool)","parent":null,"children":[],"decl_id":null,"docs":" Insert the value into the set, and get its index.","sig":null,"attributes":[{"value":"/ Insert the value into the set, and get its index.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":96931,"byte_end":96984,"line_start":216,"line_end":216,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":96989,"byte_end":96992,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ If an equivalent item already exists in the set, it returns","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":96997,"byte_end":97060,"line_start":218,"line_end":218,"column_start":5,"column_end":68}},{"value":"/ the index of the existing item and `false`, leaving the","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":97065,"byte_end":97124,"line_start":219,"line_end":219,"column_start":5,"column_end":64}},{"value":"/ original value in the set and without altering its insertion","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":97129,"byte_end":97193,"line_start":220,"line_end":220,"column_start":5,"column_end":69}},{"value":"/ order. Otherwise, it inserts the new item and returns the index","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":97198,"byte_end":97265,"line_start":221,"line_end":221,"column_start":5,"column_end":72}},{"value":"/ of the inserted item and `true`.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":97270,"byte_end":97306,"line_start":222,"line_end":222,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":97311,"byte_end":97314,"line_start":223,"line_end":223,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (amortized average).","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":97319,"byte_end":97369,"line_start":224,"line_end":224,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":697},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":97791,"byte_end":97795,"line_start":239,"line_end":239,"column_start":12,"column_end":16},"name":"iter","qualname":"<IndexSet<T, S>>::iter","value":"pub fn iter(&Self) -> Iter<, T>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the values of the set, in their order\n","sig":null,"attributes":[{"value":"/ Return an iterator over the values of the set, in their order","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":97714,"byte_end":97779,"line_start":238,"line_end":238,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":698},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":98060,"byte_end":98070,"line_start":248,"line_end":248,"column_start":12,"column_end":22},"name":"difference","qualname":"<IndexSet<T, S>>::difference","value":"pub fn difference<'a, S2>(&'a Self, &'a IndexSet<T, S2>) -> Difference where\nS2: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the values that are in `self` but not `other`.","sig":null,"attributes":[{"value":"/ Return an iterator over the values that are in `self` but not `other`.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":97892,"byte_end":97966,"line_start":245,"line_end":245,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":97971,"byte_end":97974,"line_start":246,"line_end":246,"column_start":5,"column_end":8}},{"value":"/ Values are produced in the same order that they appear in `self`.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":97979,"byte_end":98048,"line_start":247,"line_end":247,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":701},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":98519,"byte_end":98539,"line_start":263,"line_end":263,"column_start":12,"column_end":32},"name":"symmetric_difference","qualname":"<IndexSet<T, S>>::symmetric_difference","value":"pub fn symmetric_difference<'a, S2>(&'a Self, &'a IndexSet<T, S2>)\n-> SymmetricDifference where S2: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the values that are in `self` or `other`,\n but not in both.","sig":null,"attributes":[{"value":"/ Return an iterator over the values that are in `self` or `other`,","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":98275,"byte_end":98344,"line_start":258,"line_end":258,"column_start":5,"column_end":74}},{"value":"/ but not in both.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":98349,"byte_end":98369,"line_start":259,"line_end":259,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":98374,"byte_end":98377,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ Values from `self` are produced in their original order, followed by","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":98382,"byte_end":98454,"line_start":261,"line_end":261,"column_start":5,"column_end":77}},{"value":"/ values from `other` in their original order.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":98459,"byte_end":98507,"line_start":262,"line_end":262,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":704},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":98979,"byte_end":98991,"line_start":278,"line_end":278,"column_start":12,"column_end":24},"name":"intersection","qualname":"<IndexSet<T, S>>::intersection","value":"pub fn intersection<'a, S2>(&'a Self, &'a IndexSet<T, S2>) -> Intersection\nwhere S2: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the values that are in both `self` and `other`.","sig":null,"attributes":[{"value":"/ Return an iterator over the values that are in both `self` and `other`.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":98810,"byte_end":98885,"line_start":275,"line_end":275,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":98890,"byte_end":98893,"line_start":276,"line_end":276,"column_start":5,"column_end":8}},{"value":"/ Values are produced in the same order that they appear in `self`.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":98898,"byte_end":98967,"line_start":277,"line_end":277,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":707},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":99433,"byte_end":99438,"line_start":292,"line_end":292,"column_start":12,"column_end":17},"name":"union","qualname":"<IndexSet<T, S>>::union","value":"pub fn union<'a, S2>(&'a Self, &'a IndexSet<T, S2>) -> Union where\nS2: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over all values that are in `self` or `other`.","sig":null,"attributes":[{"value":"/ Return an iterator over all values that are in `self` or `other`.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":99200,"byte_end":99269,"line_start":288,"line_end":288,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":99274,"byte_end":99277,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ Values from `self` are produced in their original order, followed by","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":99282,"byte_end":99354,"line_start":290,"line_end":290,"column_start":5,"column_end":77}},{"value":"/ values that are unique to `other` in their original order.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":99359,"byte_end":99421,"line_start":291,"line_end":291,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":710},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":99772,"byte_end":99780,"line_start":304,"line_end":304,"column_start":12,"column_end":20},"name":"contains","qualname":"<IndexSet<T, S>>::contains","value":"pub fn contains<Q: ?Sized>(&Self, &Q) -> bool where Q: Hash + Equivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Return `true` if an equivalent to `value` exists in the set.","sig":null,"attributes":[{"value":"/ Return `true` if an equivalent to `value` exists in the set.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":99643,"byte_end":99707,"line_start":301,"line_end":301,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":99712,"byte_end":99715,"line_start":302,"line_end":302,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":99720,"byte_end":99760,"line_start":303,"line_end":303,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":712},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":100073,"byte_end":100076,"line_start":315,"line_end":315,"column_start":12,"column_end":15},"name":"get","qualname":"<IndexSet<T, S>>::get","value":"pub fn get<Q: ?Sized>(&Self, &Q) -> Option<&T> where Q: Hash + Equivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the value stored in the set, if it is present,\n else `None`.","sig":null,"attributes":[{"value":"/ Return a reference to the value stored in the set, if it is present,","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":99915,"byte_end":99987,"line_start":311,"line_end":311,"column_start":5,"column_end":77}},{"value":"/ else `None`.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":99992,"byte_end":100008,"line_start":312,"line_end":312,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":100013,"byte_end":100016,"line_start":313,"line_end":313,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":100021,"byte_end":100061,"line_start":314,"line_end":314,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":715},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":100277,"byte_end":100285,"line_start":323,"line_end":323,"column_start":12,"column_end":20},"name":"get_full","qualname":"<IndexSet<T, S>>::get_full","value":"pub fn get_full<Q: ?Sized>(&Self, &Q) -> Option<(usize, &T)> where Q: Hash +\nEquivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Return item index and value\n","sig":null,"attributes":[{"value":"/ Return item index and value","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":100234,"byte_end":100265,"line_start":322,"line_end":322,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":718},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":100515,"byte_end":100527,"line_start":331,"line_end":331,"column_start":12,"column_end":24},"name":"get_index_of","qualname":"<IndexSet<T, S>>::get_index_of","value":"pub fn get_index_of<Q: ?Sized>(&Self, &Q) -> Option<usize> where Q: Hash +\nEquivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Return item index, if it exists in the set\n","sig":null,"attributes":[{"value":"/ Return item index, if it exists in the set","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":100457,"byte_end":100503,"line_start":330,"line_end":330,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":720},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":100870,"byte_end":100877,"line_start":342,"line_end":342,"column_start":12,"column_end":19},"name":"replace","qualname":"<IndexSet<T, S>>::replace","value":"pub fn replace(&mut Self, T) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Adds a value to the set, replacing the existing value, if any, that is\n equal to the given one. Returns the replaced value.","sig":null,"attributes":[{"value":"/ Adds a value to the set, replacing the existing value, if any, that is","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":100671,"byte_end":100745,"line_start":338,"line_end":338,"column_start":5,"column_end":79}},{"value":"/ equal to the given one. Returns the replaced value.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":100750,"byte_end":100805,"line_start":339,"line_end":339,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":100810,"byte_end":100813,"line_start":340,"line_end":340,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":100818,"byte_end":100858,"line_start":341,"line_end":341,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":722},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":101453,"byte_end":101459,"line_start":360,"line_end":360,"column_start":12,"column_end":18},"name":"remove","qualname":"<IndexSet<T, S>>::remove","value":"pub fn remove<Q: ?Sized>(&mut Self, &Q) -> bool where Q: Hash + Equivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove the value from the set, and return `true` if it was present.","sig":null,"attributes":[{"value":"/ Remove the value from the set, and return `true` if it was present.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":101150,"byte_end":101221,"line_start":354,"line_end":354,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":101226,"byte_end":101229,"line_start":355,"line_end":355,"column_start":5,"column_end":8}},{"value":"/ **NOTE:** This is equivalent to `.swap_remove(value)`, if you want","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":101234,"byte_end":101304,"line_start":356,"line_end":356,"column_start":5,"column_end":75}},{"value":"/ to preserve the order of the values in the set, use `.shift_remove(value)`.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":101309,"byte_end":101388,"line_start":357,"line_end":357,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":101393,"byte_end":101396,"line_start":358,"line_end":358,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":101401,"byte_end":101441,"line_start":359,"line_end":359,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":724},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":102004,"byte_end":102015,"line_start":376,"line_end":376,"column_start":12,"column_end":23},"name":"swap_remove","qualname":"<IndexSet<T, S>>::swap_remove","value":"pub fn swap_remove<Q: ?Sized>(&mut Self, &Q) -> bool where Q: Hash +\nEquivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove the value from the set, and return `true` if it was present.","sig":null,"attributes":[{"value":"/ Remove the value from the set, and return `true` if it was present.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":101593,"byte_end":101664,"line_start":367,"line_end":367,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":101669,"byte_end":101672,"line_start":368,"line_end":368,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the value is removed by swapping it with the","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":101677,"byte_end":101750,"line_start":369,"line_end":369,"column_start":5,"column_end":78}},{"value":"/ last element of the set and popping it off. **This perturbs","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":101755,"byte_end":101818,"line_start":370,"line_end":370,"column_start":5,"column_end":68}},{"value":"/ the postion of what used to be the last element!**","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":101823,"byte_end":101877,"line_start":371,"line_end":371,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":101882,"byte_end":101885,"line_start":372,"line_end":372,"column_start":5,"column_end":8}},{"value":"/ Return `false` if `value` was not in the set.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":101890,"byte_end":101939,"line_start":373,"line_end":373,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":101944,"byte_end":101947,"line_start":374,"line_end":374,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":101952,"byte_end":101992,"line_start":375,"line_end":375,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":726},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":102569,"byte_end":102581,"line_start":392,"line_end":392,"column_start":12,"column_end":24},"name":"shift_remove","qualname":"<IndexSet<T, S>>::shift_remove","value":"pub fn shift_remove<Q: ?Sized>(&mut Self, &Q) -> bool where Q: Hash +\nEquivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove the value from the set, and return `true` if it was present.","sig":null,"attributes":[{"value":"/ Remove the value from the set, and return `true` if it was present.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":102163,"byte_end":102234,"line_start":383,"line_end":383,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":102239,"byte_end":102242,"line_start":384,"line_end":384,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the value is removed by shifting all of the","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":102247,"byte_end":102314,"line_start":385,"line_end":385,"column_start":5,"column_end":72}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":102319,"byte_end":102380,"line_start":386,"line_end":386,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":102385,"byte_end":102442,"line_start":387,"line_end":387,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":102447,"byte_end":102450,"line_start":388,"line_end":388,"column_start":5,"column_end":8}},{"value":"/ Return `false` if `value` was not in the set.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":102455,"byte_end":102504,"line_start":389,"line_end":389,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":102509,"byte_end":102512,"line_start":390,"line_end":390,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":102517,"byte_end":102557,"line_start":391,"line_end":391,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":728},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":103067,"byte_end":103071,"line_start":407,"line_end":407,"column_start":12,"column_end":16},"name":"take","qualname":"<IndexSet<T, S>>::take","value":"pub fn take<Q: ?Sized>(&mut Self, &Q) -> Option<T> where Q: Hash +\nEquivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes and returns the value in the set, if any, that is equal to the\n given one.","sig":null,"attributes":[{"value":"/ Removes and returns the value in the set, if any, that is equal to the","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":102730,"byte_end":102804,"line_start":399,"line_end":399,"column_start":5,"column_end":79}},{"value":"/ given one.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":102809,"byte_end":102823,"line_start":400,"line_end":400,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":102828,"byte_end":102831,"line_start":401,"line_end":401,"column_start":5,"column_end":8}},{"value":"/ **NOTE:** This is equivalent to `.swap_take(value)`, if you need to","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":102836,"byte_end":102907,"line_start":402,"line_end":402,"column_start":5,"column_end":76}},{"value":"/ preserve the order of the values in the set, use `.shift_take(value)`","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":102912,"byte_end":102985,"line_start":403,"line_end":403,"column_start":5,"column_end":78}},{"value":"/ instead.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":102990,"byte_end":103002,"line_start":404,"line_end":404,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":103007,"byte_end":103010,"line_start":405,"line_end":405,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":103015,"byte_end":103055,"line_start":406,"line_end":406,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":730},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":103640,"byte_end":103649,"line_start":424,"line_end":424,"column_start":12,"column_end":21},"name":"swap_take","qualname":"<IndexSet<T, S>>::swap_take","value":"pub fn swap_take<Q: ?Sized>(&mut Self, &Q) -> Option<T> where Q: Hash +\nEquivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes and returns the value in the set, if any, that is equal to the\n given one.","sig":null,"attributes":[{"value":"/ Removes and returns the value in the set, if any, that is equal to the","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":103208,"byte_end":103282,"line_start":414,"line_end":414,"column_start":5,"column_end":79}},{"value":"/ given one.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":103287,"byte_end":103301,"line_start":415,"line_end":415,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":103306,"byte_end":103309,"line_start":416,"line_end":416,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the value is removed by swapping it with the","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":103314,"byte_end":103387,"line_start":417,"line_end":417,"column_start":5,"column_end":78}},{"value":"/ last element of the set and popping it off. **This perturbs","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":103392,"byte_end":103455,"line_start":418,"line_end":418,"column_start":5,"column_end":68}},{"value":"/ the postion of what used to be the last element!**","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":103460,"byte_end":103514,"line_start":419,"line_end":419,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":103519,"byte_end":103522,"line_start":420,"line_end":420,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `value` was not in the set.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":103527,"byte_end":103575,"line_start":421,"line_end":421,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":103580,"byte_end":103583,"line_start":422,"line_end":422,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":103588,"byte_end":103628,"line_start":423,"line_end":423,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":733},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":104244,"byte_end":104254,"line_start":441,"line_end":441,"column_start":12,"column_end":22},"name":"shift_take","qualname":"<IndexSet<T, S>>::shift_take","value":"pub fn shift_take<Q: ?Sized>(&mut Self, &Q) -> Option<T> where Q: Hash +\nEquivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes and returns the value in the set, if any, that is equal to the\n given one.","sig":null,"attributes":[{"value":"/ Removes and returns the value in the set, if any, that is equal to the","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":103817,"byte_end":103891,"line_start":431,"line_end":431,"column_start":5,"column_end":79}},{"value":"/ given one.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":103896,"byte_end":103910,"line_start":432,"line_end":432,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":103915,"byte_end":103918,"line_start":433,"line_end":433,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the value is removed by shifting all of the","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":103923,"byte_end":103990,"line_start":434,"line_end":434,"column_start":5,"column_end":72}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":103995,"byte_end":104056,"line_start":435,"line_end":435,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":104061,"byte_end":104118,"line_start":436,"line_end":436,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":104123,"byte_end":104126,"line_start":437,"line_end":437,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `value` was not in the set.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":104131,"byte_end":104179,"line_start":438,"line_end":438,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":104184,"byte_end":104187,"line_start":439,"line_end":439,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":104192,"byte_end":104232,"line_start":440,"line_end":440,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":736},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":104774,"byte_end":104790,"line_start":455,"line_end":455,"column_start":12,"column_end":28},"name":"swap_remove_full","qualname":"<IndexSet<T, S>>::swap_remove_full","value":"pub fn swap_remove_full<Q: ?Sized>(&mut Self, &Q) -> Option<(usize, T)> where\nQ: Hash + Equivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove the value from the set return it and the index it had.","sig":null,"attributes":[{"value":"/ Remove the value from the set return it and the index it had.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":104423,"byte_end":104488,"line_start":448,"line_end":448,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":104493,"byte_end":104496,"line_start":449,"line_end":449,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the value is removed by swapping it with the","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":104501,"byte_end":104574,"line_start":450,"line_end":450,"column_start":5,"column_end":78}},{"value":"/ last element of the set and popping it off. **This perturbs","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":104579,"byte_end":104642,"line_start":451,"line_end":451,"column_start":5,"column_end":68}},{"value":"/ the postion of what used to be the last element!**","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":104647,"byte_end":104701,"line_start":452,"line_end":452,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":104706,"byte_end":104709,"line_start":453,"line_end":453,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `value` was not in the set.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":104714,"byte_end":104762,"line_start":454,"line_end":454,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":739},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":105318,"byte_end":105335,"line_start":469,"line_end":469,"column_start":12,"column_end":29},"name":"shift_remove_full","qualname":"<IndexSet<T, S>>::shift_remove_full","value":"pub fn shift_remove_full<Q: ?Sized>(&mut Self, &Q) -> Option<(usize, T)> where\nQ: Hash + Equivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove the value from the set return it and the index it had.","sig":null,"attributes":[{"value":"/ Remove the value from the set return it and the index it had.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":104972,"byte_end":105037,"line_start":462,"line_end":462,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":105042,"byte_end":105045,"line_start":463,"line_end":463,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the value is removed by shifting all of the","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":105050,"byte_end":105117,"line_start":464,"line_end":464,"column_start":5,"column_end":72}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":105122,"byte_end":105183,"line_start":465,"line_end":465,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":105188,"byte_end":105245,"line_start":466,"line_end":466,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":105250,"byte_end":105253,"line_start":467,"line_end":467,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `value` was not in the set.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":105258,"byte_end":105306,"line_start":468,"line_end":468,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":742},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":105608,"byte_end":105611,"line_start":479,"line_end":479,"column_start":12,"column_end":15},"name":"pop","qualname":"<IndexSet<T, S>>::pop","value":"pub fn pop(&mut Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove the last value","sig":null,"attributes":[{"value":"/ Remove the last value","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":105518,"byte_end":105543,"line_start":476,"line_end":476,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":105548,"byte_end":105551,"line_start":477,"line_end":477,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":105556,"byte_end":105596,"line_start":478,"line_end":478,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":744},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":105956,"byte_end":105962,"line_start":490,"line_end":490,"column_start":12,"column_end":18},"name":"retain","qualname":"<IndexSet<T, S>>::retain","value":"pub fn retain<F>(&mut Self, F) where F: FnMut(&T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Scan through each value in the set and keep those where the\n closure `keep` returns `true`.","sig":null,"attributes":[{"value":"/ Scan through each value in the set and keep those where the","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":105689,"byte_end":105752,"line_start":483,"line_end":483,"column_start":5,"column_end":68}},{"value":"/ closure `keep` returns `true`.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":105757,"byte_end":105791,"line_start":484,"line_end":484,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":105796,"byte_end":105799,"line_start":485,"line_end":485,"column_start":5,"column_end":8}},{"value":"/ The elements are visited in order, and remaining elements keep their","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":105804,"byte_end":105876,"line_start":486,"line_end":486,"column_start":5,"column_end":77}},{"value":"/ order.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":105881,"byte_end":105891,"line_start":487,"line_end":487,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":105896,"byte_end":105899,"line_start":488,"line_end":488,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":105904,"byte_end":105944,"line_start":489,"line_end":489,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":747},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":106207,"byte_end":106211,"line_start":500,"line_end":500,"column_start":12,"column_end":16},"name":"sort","qualname":"<IndexSet<T, S>>::sort","value":"pub fn sort(&mut Self) where T: Ord","parent":null,"children":[],"decl_id":null,"docs":" Sort the set’s values by their default ordering.","sig":null,"attributes":[{"value":"/ Sort the set’s values by their default ordering.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":106098,"byte_end":106152,"line_start":497,"line_end":497,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":106157,"byte_end":106160,"line_start":498,"line_end":498,"column_start":5,"column_end":8}},{"value":"/ See `sort_by` for details.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":106165,"byte_end":106195,"line_start":499,"line_end":499,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":748},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":106472,"byte_end":106479,"line_start":510,"line_end":510,"column_start":12,"column_end":19},"name":"sort_by","qualname":"<IndexSet<T, S>>::sort_by","value":"pub fn sort_by<F>(&mut Self, F) where F: FnMut(&T, &T) -> Ordering","parent":null,"children":[],"decl_id":null,"docs":" Sort the set’s values in place using the comparison function `compare`.","sig":null,"attributes":[{"value":"/ Sort the set’s values in place using the comparison function `compare`.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":106295,"byte_end":106372,"line_start":507,"line_end":507,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":106377,"byte_end":106380,"line_start":508,"line_end":508,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n log n)** time and **O(n)** space. The sort is stable.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":106385,"byte_end":106460,"line_start":509,"line_end":509,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":751},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":106782,"byte_end":106791,"line_start":521,"line_end":521,"column_start":12,"column_end":21},"name":"sorted_by","qualname":"<IndexSet<T, S>>::sorted_by","value":"pub fn sorted_by<F>(Self, F) -> IntoIter<T> where F: FnMut(&T, &T) -> Ordering","parent":null,"children":[],"decl_id":null,"docs":" Sort the values of the set and return a by value iterator of\n the values with the result.","sig":null,"attributes":[{"value":"/ Sort the values of the set and return a by value iterator of","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":106634,"byte_end":106698,"line_start":517,"line_end":517,"column_start":5,"column_end":69}},{"value":"/ the values with the result.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":106703,"byte_end":106734,"line_start":518,"line_end":518,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":106739,"byte_end":106742,"line_start":519,"line_end":519,"column_start":5,"column_end":8}},{"value":"/ The sort is stable.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":106747,"byte_end":106770,"line_start":520,"line_end":520,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":754},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":107124,"byte_end":107129,"line_start":532,"line_end":532,"column_start":12,"column_end":17},"name":"drain","qualname":"<IndexSet<T, S>>::drain","value":"pub fn drain(&mut Self, RangeFull) -> Drain<, T>","parent":null,"children":[],"decl_id":null,"docs":" Clears the `IndexSet`, returning all values as a drain iterator.\n Keeps the allocated memory for reuse.\n","sig":null,"attributes":[{"value":"/ Clears the `IndexSet`, returning all values as a drain iterator.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":106998,"byte_end":107066,"line_start":530,"line_end":530,"column_start":5,"column_end":73}},{"value":"/ Keeps the allocated memory for reuse.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":107071,"byte_end":107112,"line_start":531,"line_end":531,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":758},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":107425,"byte_end":107434,"line_start":545,"line_end":545,"column_start":12,"column_end":21},"name":"get_index","qualname":"<IndexSet<T, S>>::get_index","value":"pub fn get_index(&Self, usize) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Get a value by index","sig":null,"attributes":[{"value":"/ Get a value by index","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":107286,"byte_end":107310,"line_start":540,"line_end":540,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":107315,"byte_end":107318,"line_start":541,"line_end":541,"column_start":5,"column_end":8}},{"value":"/ Valid indices are *0 <= index < self.len()*","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":107323,"byte_end":107370,"line_start":542,"line_end":542,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":107375,"byte_end":107378,"line_start":543,"line_end":543,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":107383,"byte_end":107413,"line_start":544,"line_end":544,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":760},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":107911,"byte_end":107928,"line_start":558,"line_end":558,"column_start":12,"column_end":29},"name":"swap_remove_index","qualname":"<IndexSet<T, S>>::swap_remove_index","value":"pub fn swap_remove_index(&mut Self, usize) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair by index","sig":null,"attributes":[{"value":"/ Remove the key-value pair by index","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":107535,"byte_end":107573,"line_start":549,"line_end":549,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":107578,"byte_end":107581,"line_start":550,"line_end":550,"column_start":5,"column_end":8}},{"value":"/ Valid indices are *0 <= index < self.len()*","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":107586,"byte_end":107633,"line_start":551,"line_end":551,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":107638,"byte_end":107641,"line_start":552,"line_end":552,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the value is removed by swapping it with the","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":107646,"byte_end":107719,"line_start":553,"line_end":553,"column_start":5,"column_end":78}},{"value":"/ last element of the set and popping it off. **This perturbs","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":107724,"byte_end":107787,"line_start":554,"line_end":554,"column_start":5,"column_end":68}},{"value":"/ the postion of what used to be the last element!**","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":107792,"byte_end":107846,"line_start":555,"line_end":555,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":107851,"byte_end":107854,"line_start":556,"line_end":556,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":107859,"byte_end":107899,"line_start":557,"line_end":557,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":762},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":108410,"byte_end":108428,"line_start":571,"line_end":571,"column_start":12,"column_end":30},"name":"shift_remove_index","qualname":"<IndexSet<T, S>>::shift_remove_index","value":"pub fn shift_remove_index(&mut Self, usize) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair by index","sig":null,"attributes":[{"value":"/ Remove the key-value pair by index","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":108039,"byte_end":108077,"line_start":562,"line_end":562,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":108082,"byte_end":108085,"line_start":563,"line_end":563,"column_start":5,"column_end":8}},{"value":"/ Valid indices are *0 <= index < self.len()*","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":108090,"byte_end":108137,"line_start":564,"line_end":564,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":108142,"byte_end":108145,"line_start":565,"line_end":565,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the value is removed by shifting all of the","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":108150,"byte_end":108217,"line_start":566,"line_end":566,"column_start":5,"column_end":72}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":108222,"byte_end":108283,"line_start":567,"line_end":567,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":108288,"byte_end":108345,"line_start":568,"line_end":568,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":108350,"byte_end":108353,"line_start":569,"line_end":569,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":108358,"byte_end":108398,"line_start":570,"line_end":570,"column_start":5,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":764},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":108857,"byte_end":108865,"line_start":583,"line_end":583,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::set::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":766}],"decl_id":null,"docs":" An owning iterator over the items of a `IndexSet`.","sig":null,"attributes":[{"value":"/ An owning iterator over the items of a `IndexSet`.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":108538,"byte_end":108592,"line_start":576,"line_end":576,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":108593,"byte_end":108596,"line_start":577,"line_end":577,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`into_iter`] method on [`IndexSet`]","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":108597,"byte_end":108669,"line_start":578,"line_end":578,"column_start":1,"column_end":73}},{"value":"/ (provided by the `IntoIterator` trait). See its documentation for more.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":108670,"byte_end":108745,"line_start":579,"line_end":579,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":108746,"byte_end":108749,"line_start":580,"line_end":580,"column_start":1,"column_end":4}},{"value":"/ [`IndexSet`]: struct.IndexSet.html","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":108750,"byte_end":108788,"line_start":581,"line_end":581,"column_start":1,"column_end":39}},{"value":"/ [`into_iter`]: struct.IndexSet.html#method.into_iter","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":108789,"byte_end":108845,"line_start":582,"line_end":582,"column_start":1,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":779},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":109754,"byte_end":109758,"line_start":619,"line_end":619,"column_start":12,"column_end":16},"name":"Iter","qualname":"::set::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":782}],"decl_id":null,"docs":" An iterator over the items of a `IndexSet`.","sig":null,"attributes":[{"value":"/ An iterator over the items of a `IndexSet`.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":109496,"byte_end":109543,"line_start":612,"line_end":612,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":109544,"byte_end":109547,"line_start":613,"line_end":613,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`iter`] method on [`IndexSet`].","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":109548,"byte_end":109616,"line_start":614,"line_end":614,"column_start":1,"column_end":69}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":109617,"byte_end":109652,"line_start":615,"line_end":615,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":109653,"byte_end":109656,"line_start":616,"line_end":616,"column_start":1,"column_end":4}},{"value":"/ [`IndexSet`]: struct.IndexSet.html","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":109657,"byte_end":109695,"line_start":617,"line_end":617,"column_start":1,"column_end":39}},{"value":"/ [`iter`]: struct.IndexSet.html#method.iter","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":109696,"byte_end":109742,"line_start":618,"line_end":618,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":803},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":110772,"byte_end":110777,"line_start":662,"line_end":662,"column_start":12,"column_end":17},"name":"Drain","qualname":"::set::Drain","value":"Drain {  }","parent":null,"children":[{"krate":0,"index":806}],"decl_id":null,"docs":" A draining iterator over the items of a `IndexSet`.","sig":null,"attributes":[{"value":"/ A draining iterator over the items of a `IndexSet`.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":110503,"byte_end":110558,"line_start":655,"line_end":655,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":110559,"byte_end":110562,"line_start":656,"line_end":656,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`drain`] method on [`IndexSet`].","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":110563,"byte_end":110632,"line_start":657,"line_end":657,"column_start":1,"column_end":70}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":110633,"byte_end":110668,"line_start":658,"line_end":658,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":110669,"byte_end":110672,"line_start":659,"line_end":659,"column_start":1,"column_end":4}},{"value":"/ [`IndexSet`]: struct.IndexSet.html","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":110673,"byte_end":110711,"line_start":660,"line_end":660,"column_start":1,"column_end":39}},{"value":"/ [`drain`]: struct.IndexSet.html#method.drain","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":110712,"byte_end":110760,"line_start":661,"line_end":661,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":860},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":113089,"byte_end":113100,"line_start":775,"line_end":775,"column_start":12,"column_end":23},"name":"is_disjoint","qualname":"<IndexSet<T, S>>::is_disjoint","value":"pub fn is_disjoint<S2>(&Self, &IndexSet<T, S2>) -> bool where S2: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if `self` has no elements in common with `other`.\n","sig":null,"attributes":[{"value":"/ Returns `true` if `self` has no elements in common with `other`.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":113009,"byte_end":113077,"line_start":774,"line_end":774,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":864},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":113475,"byte_end":113484,"line_start":787,"line_end":787,"column_start":12,"column_end":21},"name":"is_subset","qualname":"<IndexSet<T, S>>::is_subset","value":"pub fn is_subset<S2>(&Self, &IndexSet<T, S2>) -> bool where S2: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if all elements of `self` are contained in `other`.\n","sig":null,"attributes":[{"value":"/ Returns `true` if all elements of `self` are contained in `other`.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":113393,"byte_end":113463,"line_start":786,"line_end":786,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":867},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":113752,"byte_end":113763,"line_start":795,"line_end":795,"column_start":12,"column_end":23},"name":"is_superset","qualname":"<IndexSet<T, S>>::is_superset","value":"pub fn is_superset<S2>(&Self, &IndexSet<T, S2>) -> bool where S2: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if all elements of `other` are contained in `self`.\n","sig":null,"attributes":[{"value":"/ Returns `true` if all elements of `other` are contained in `self`.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":113670,"byte_end":113740,"line_start":794,"line_end":794,"column_start":5,"column_end":75}}]},{"kind":"Struct","id":{"krate":0,"index":869},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":114189,"byte_end":114199,"line_start":810,"line_end":810,"column_start":12,"column_end":22},"name":"Difference","qualname":"::set::Difference","value":"Difference {  }","parent":null,"children":[{"krate":0,"index":873},{"krate":0,"index":874}],"decl_id":null,"docs":" A lazy iterator producing elements in the difference of `IndexSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the difference of `IndexSet`s.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":113888,"byte_end":113960,"line_start":803,"line_end":803,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":113961,"byte_end":113964,"line_start":804,"line_end":804,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`difference`] method on [`IndexSet`].","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":113965,"byte_end":114039,"line_start":805,"line_end":805,"column_start":1,"column_end":75}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":114040,"byte_end":114075,"line_start":806,"line_end":806,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":114076,"byte_end":114079,"line_start":807,"line_end":807,"column_start":1,"column_end":4}},{"value":"/ [`IndexSet`]: struct.IndexSet.html","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":114080,"byte_end":114118,"line_start":808,"line_end":808,"column_start":1,"column_end":39}},{"value":"/ [`difference`]: struct.IndexSet.html#method.difference","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":114119,"byte_end":114177,"line_start":809,"line_end":809,"column_start":1,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":897},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":115768,"byte_end":115780,"line_start":877,"line_end":877,"column_start":12,"column_end":24},"name":"Intersection","qualname":"::set::Intersection","value":"Intersection {  }","parent":null,"children":[{"krate":0,"index":901},{"krate":0,"index":902}],"decl_id":null,"docs":" A lazy iterator producing elements in the intersection of `IndexSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the intersection of `IndexSet`s.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":115459,"byte_end":115533,"line_start":870,"line_end":870,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":115534,"byte_end":115537,"line_start":871,"line_end":871,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`intersection`] method on [`IndexSet`].","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":115538,"byte_end":115614,"line_start":872,"line_end":872,"column_start":1,"column_end":77}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":115615,"byte_end":115650,"line_start":873,"line_end":873,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":115651,"byte_end":115654,"line_start":874,"line_end":874,"column_start":1,"column_end":4}},{"value":"/ [`IndexSet`]: struct.IndexSet.html","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":115655,"byte_end":115693,"line_start":875,"line_end":875,"column_start":1,"column_end":39}},{"value":"/ [`intersection`]: struct.IndexSet.html#method.intersection","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":115694,"byte_end":115756,"line_start":876,"line_end":876,"column_start":1,"column_end":63}}]},{"kind":"Struct","id":{"krate":0,"index":925},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":117389,"byte_end":117408,"line_start":944,"line_end":944,"column_start":12,"column_end":31},"name":"SymmetricDifference","qualname":"::set::SymmetricDifference","value":"SymmetricDifference {  }","parent":null,"children":[{"krate":0,"index":930}],"decl_id":null,"docs":" A lazy iterator producing elements in the symmetric difference of `IndexSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the symmetric difference of `IndexSet`s.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":117048,"byte_end":117130,"line_start":937,"line_end":937,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":117131,"byte_end":117134,"line_start":938,"line_end":938,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`symmetric_difference`] method on","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":117135,"byte_end":117205,"line_start":939,"line_end":939,"column_start":1,"column_end":71}},{"value":"/ [`IndexSet`]. See its documentation for more.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":117206,"byte_end":117255,"line_start":940,"line_end":940,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":117256,"byte_end":117259,"line_start":941,"line_end":941,"column_start":1,"column_end":4}},{"value":"/ [`IndexSet`]: struct.IndexSet.html","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":117260,"byte_end":117298,"line_start":942,"line_end":942,"column_start":1,"column_end":39}},{"value":"/ [`symmetric_difference`]: struct.IndexSet.html#method.symmetric_difference","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":117299,"byte_end":117377,"line_start":943,"line_end":943,"column_start":1,"column_end":79}}]},{"kind":"Struct","id":{"krate":0,"index":960},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":118946,"byte_end":118951,"line_start":1009,"line_end":1009,"column_start":12,"column_end":17},"name":"Union","qualname":"::set::Union","value":"Union {  }","parent":null,"children":[{"krate":0,"index":964}],"decl_id":null,"docs":" A lazy iterator producing elements in the union of `IndexSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the union of `IndexSet`s.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":118665,"byte_end":118732,"line_start":1002,"line_end":1002,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":118733,"byte_end":118736,"line_start":1003,"line_end":1003,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`union`] method on [`IndexSet`].","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":118737,"byte_end":118806,"line_start":1004,"line_end":1004,"column_start":1,"column_end":70}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":118807,"byte_end":118842,"line_start":1005,"line_end":1005,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":118843,"byte_end":118846,"line_start":1006,"line_end":1006,"column_start":1,"column_end":4}},{"value":"/ [`IndexSet`]: struct.IndexSet.html","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":118847,"byte_end":118885,"line_start":1007,"line_end":1007,"column_start":1,"column_end":39}},{"value":"/ [`union`]: struct.IndexSet.html#method.union","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":118886,"byte_end":118934,"line_start":1008,"line_end":1008,"column_start":1,"column_end":49}}]},{"kind":"Type","id":{"krate":0,"index":1043},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","byte_start":4223,"byte_end":4228,"line_start":157,"line_end":157,"column_start":10,"column_end":15},"name":"Entry","qualname":"::Entries::Entry","value":"type Entry;","parent":{"krate":0,"index":1042},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/equivalent.rs","byte_start":8623,"byte_end":8624,"line_start":18,"line_end":18,"column_start":46,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":16}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/mutable_keys.rs","byte_start":10491,"byte_end":10499,"line_start":52,"line_end":52,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":40},{"krate":0,"index":42}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":12513,"byte_end":12522,"line_start":43,"line_end":43,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":82}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":12839,"byte_end":12848,"line_start":54,"line_end":54,"column_start":19,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":12875,"byte_end":12884,"line_start":55,"line_end":55,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":87}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":12981,"byte_end":12990,"line_start":62,"line_end":62,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":90}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":13218,"byte_end":13227,"line_start":71,"line_end":71,"column_start":35,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":93}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":13491,"byte_end":13500,"line_start":84,"line_end":84,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":96}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":14410,"byte_end":14413,"line_start":111,"line_end":111,"column_start":16,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":98}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":14511,"byte_end":14514,"line_start":118,"line_end":118,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":100}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":14738,"byte_end":14741,"line_start":127,"line_end":127,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":107},{"krate":0,"index":109},{"krate":0,"index":111}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":17386,"byte_end":17400,"line_start":235,"line_end":235,"column_start":10,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":122},{"krate":0,"index":123}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":19990,"byte_end":19998,"line_start":323,"line_end":323,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":135}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":20914,"byte_end":20922,"line_start":360,"line_end":360,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":151}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":22565,"byte_end":22573,"line_start":424,"line_end":424,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":158},{"krate":0,"index":159}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":22971,"byte_end":22979,"line_start":439,"line_end":439,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":170},{"krate":0,"index":171}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":24981,"byte_end":24993,"line_start":517,"line_end":517,"column_start":12,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":175},{"krate":0,"index":176}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":27436,"byte_end":27441,"line_start":602,"line_end":602,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":200},{"krate":0,"index":201},{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":207}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":29332,"byte_end":29337,"line_start":666,"line_end":666,"column_start":65,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":212}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":29900,"byte_end":29913,"line_start":686,"line_end":686,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":225},{"krate":0,"index":226},{"krate":0,"index":227},{"krate":0,"index":228},{"krate":0,"index":229},{"krate":0,"index":230},{"krate":0,"index":231},{"krate":0,"index":232},{"krate":0,"index":233},{"krate":0,"index":234},{"krate":0,"index":235},{"krate":0,"index":236},{"krate":0,"index":237}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":33035,"byte_end":33048,"line_start":775,"line_end":775,"column_start":65,"column_end":78},"value":"","parent":null,"children":[{"krate":0,"index":242}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":33549,"byte_end":33560,"line_start":795,"line_end":795,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":255},{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":258},{"krate":0,"index":259}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":34513,"byte_end":34524,"line_start":830,"line_end":830,"column_start":52,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":265}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":34719,"byte_end":34727,"line_start":838,"line_end":838,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":270},{"krate":0,"index":272},{"krate":0,"index":273},{"krate":0,"index":274},{"krate":0,"index":276},{"krate":0,"index":277},{"krate":0,"index":279},{"krate":0,"index":280},{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":283},{"krate":0,"index":284},{"krate":0,"index":285},{"krate":0,"index":286},{"krate":0,"index":287},{"krate":0,"index":289},{"krate":0,"index":291},{"krate":0,"index":293},{"krate":0,"index":295},{"krate":0,"index":297},{"krate":0,"index":300},{"krate":0,"index":302},{"krate":0,"index":305},{"krate":0,"index":307},{"krate":0,"index":309},{"krate":0,"index":311},{"krate":0,"index":313},{"krate":0,"index":315},{"krate":0,"index":316},{"krate":0,"index":319},{"krate":0,"index":321},{"krate":0,"index":324},{"krate":0,"index":325},{"krate":0,"index":327},{"krate":0,"index":330}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":48365,"byte_end":48373,"line_start":1274,"line_end":1274,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":338},{"krate":0,"index":339},{"krate":0,"index":340},{"krate":0,"index":342}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":50699,"byte_end":50711,"line_start":1344,"line_end":1344,"column_start":12,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":347},{"krate":0,"index":348},{"krate":0,"index":349},{"krate":0,"index":350},{"krate":0,"index":351},{"krate":0,"index":352},{"krate":0,"index":354},{"krate":0,"index":357},{"krate":0,"index":359},{"krate":0,"index":361},{"krate":0,"index":363},{"krate":0,"index":365},{"krate":0,"index":367},{"krate":0,"index":370},{"krate":0,"index":371},{"krate":0,"index":372},{"krate":0,"index":374},{"krate":0,"index":375},{"krate":0,"index":377},{"krate":0,"index":379},{"krate":0,"index":382},{"krate":0,"index":385},{"krate":0,"index":387}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":68655,"byte_end":68659,"line_start":1834,"line_end":1834,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":404},{"krate":0,"index":1081},{"krate":0,"index":1082},{"krate":0,"index":1083},{"krate":0,"index":1084},{"krate":0,"index":1085},{"krate":0,"index":1086}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":68778,"byte_end":68782,"line_start":1840,"line_end":1840,"column_start":40,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":409}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":68939,"byte_end":68943,"line_start":1846,"line_end":1846,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":414}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":69098,"byte_end":69102,"line_start":1853,"line_end":1853,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":419}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":69268,"byte_end":69272,"line_start":1861,"line_end":1861,"column_start":43,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":424}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":69769,"byte_end":69775,"line_start":1878,"line_end":1878,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":434},{"krate":0,"index":1088},{"krate":0,"index":1089},{"krate":0,"index":1090},{"krate":0,"index":1091},{"krate":0,"index":1092},{"krate":0,"index":1093}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":69896,"byte_end":69902,"line_start":1884,"line_end":1884,"column_start":40,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":439}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":70066,"byte_end":70072,"line_start":1890,"line_end":1890,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":444}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":70227,"byte_end":70233,"line_start":1897,"line_end":1897,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":449}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":70403,"byte_end":70409,"line_start":1905,"line_end":1905,"column_start":43,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":454}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":70931,"byte_end":70940,"line_start":1922,"line_end":1922,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":464},{"krate":0,"index":1095},{"krate":0,"index":1096},{"krate":0,"index":1097},{"krate":0,"index":1098},{"krate":0,"index":1099},{"krate":0,"index":1100}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":71065,"byte_end":71074,"line_start":1928,"line_end":1928,"column_start":40,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":469}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":71238,"byte_end":71247,"line_start":1934,"line_end":1934,"column_start":38,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":474}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":71677,"byte_end":71681,"line_start":1951,"line_end":1951,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":484},{"krate":0,"index":1102},{"krate":0,"index":1103},{"krate":0,"index":1104},{"krate":0,"index":1105},{"krate":0,"index":1106},{"krate":0,"index":1107}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":71806,"byte_end":71810,"line_start":1957,"line_end":1957,"column_start":40,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":489}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":71969,"byte_end":71973,"line_start":1963,"line_end":1963,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":494}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":72128,"byte_end":72132,"line_start":1970,"line_end":1970,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":499}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":72310,"byte_end":72314,"line_start":1978,"line_end":1978,"column_start":55,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":504}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":72829,"byte_end":72836,"line_start":1995,"line_end":1995,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":514},{"krate":0,"index":1109},{"krate":0,"index":1110},{"krate":0,"index":1111},{"krate":0,"index":1112},{"krate":0,"index":1113},{"krate":0,"index":1114}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":72968,"byte_end":72975,"line_start":2001,"line_end":2001,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":519}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":73137,"byte_end":73144,"line_start":2007,"line_end":2007,"column_start":38,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":524}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":73632,"byte_end":73640,"line_start":2024,"line_end":2024,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":532},{"krate":0,"index":1116},{"krate":0,"index":1117},{"krate":0,"index":1118},{"krate":0,"index":1119},{"krate":0,"index":1120},{"krate":0,"index":1121}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":73758,"byte_end":73766,"line_start":2030,"line_end":2030,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":537}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":73922,"byte_end":73930,"line_start":2036,"line_end":2036,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":541}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":74051,"byte_end":74059,"line_start":2042,"line_end":2042,"column_start":51,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":545}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":74654,"byte_end":74659,"line_start":2064,"line_end":2064,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":555},{"krate":0,"index":1123},{"krate":0,"index":1124},{"krate":0,"index":1125},{"krate":0,"index":1126},{"krate":0,"index":1127},{"krate":0,"index":1128}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":74781,"byte_end":74786,"line_start":2070,"line_end":2070,"column_start":40,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1130}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":75389,"byte_end":75397,"line_start":2098,"line_end":2098,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":580},{"krate":0,"index":581},{"krate":0,"index":582}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":75723,"byte_end":75731,"line_start":2114,"line_end":2114,"column_start":47,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":592},{"krate":0,"index":593}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":76302,"byte_end":76310,"line_start":2136,"line_end":2136,"column_start":50,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":600}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":76684,"byte_end":76692,"line_start":2152,"line_end":2152,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":605}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":77276,"byte_end":77284,"line_start":2171,"line_end":2171,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":611}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":78017,"byte_end":78025,"line_start":2192,"line_end":2192,"column_start":46,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":618}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":78421,"byte_end":78429,"line_start":2206,"line_end":2206,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":625}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":78663,"byte_end":78671,"line_start":2216,"line_end":2216,"column_start":60,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":632}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":79036,"byte_end":79044,"line_start":2233,"line_end":2233,"column_start":22,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":93550,"byte_end":93558,"line_start":77,"line_end":77,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":666},{"krate":0,"index":667},{"krate":0,"index":668},{"krate":0,"index":669},{"krate":0,"index":670}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":94027,"byte_end":94035,"line_start":100,"line_end":100,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":675}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":94460,"byte_end":94468,"line_start":116,"line_end":116,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":678},{"krate":0,"index":679}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Inherent","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":94901,"byte_end":94909,"line_start":135,"line_end":135,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":683},{"krate":0,"index":684},{"krate":0,"index":685},{"krate":0,"index":686},{"krate":0,"index":687},{"krate":0,"index":688}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Inherent","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":96107,"byte_end":96115,"line_start":187,"line_end":187,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":692},{"krate":0,"index":693},{"krate":0,"index":694},{"krate":0,"index":695},{"krate":0,"index":697},{"krate":0,"index":698},{"krate":0,"index":701},{"krate":0,"index":704},{"krate":0,"index":707},{"krate":0,"index":710},{"krate":0,"index":712},{"krate":0,"index":715},{"krate":0,"index":718},{"krate":0,"index":720},{"krate":0,"index":722},{"krate":0,"index":724},{"krate":0,"index":726},{"krate":0,"index":728},{"krate":0,"index":730},{"krate":0,"index":733},{"krate":0,"index":736},{"krate":0,"index":739},{"krate":0,"index":742},{"krate":0,"index":744},{"krate":0,"index":747},{"krate":0,"index":748},{"krate":0,"index":751},{"krate":0,"index":754}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":107265,"byte_end":107273,"line_start":539,"line_end":539,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":758},{"krate":0,"index":760},{"krate":0,"index":762}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":108931,"byte_end":108939,"line_start":587,"line_end":587,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":769},{"krate":0,"index":1139},{"krate":0,"index":1140},{"krate":0,"index":1141},{"krate":0,"index":1142},{"krate":0,"index":1143},{"krate":0,"index":1144}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":109036,"byte_end":109044,"line_start":593,"line_end":593,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":772}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":109188,"byte_end":109196,"line_start":599,"line_end":599,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":775}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":109299,"byte_end":109307,"line_start":605,"line_end":605,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":778}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":109838,"byte_end":109842,"line_start":623,"line_end":623,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":786},{"krate":0,"index":1146},{"krate":0,"index":1147},{"krate":0,"index":1148},{"krate":0,"index":1149},{"krate":0,"index":1150},{"krate":0,"index":1151}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":109955,"byte_end":109959,"line_start":629,"line_end":629,"column_start":37,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":790}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":110115,"byte_end":110119,"line_start":635,"line_end":635,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":794}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":110213,"byte_end":110217,"line_start":641,"line_end":641,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":798}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":110367,"byte_end":110371,"line_start":649,"line_end":649,"column_start":40,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":802}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":110856,"byte_end":110861,"line_start":666,"line_end":666,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":810},{"krate":0,"index":1153},{"krate":0,"index":1154},{"krate":0,"index":1155},{"krate":0,"index":1156},{"krate":0,"index":1157},{"krate":0,"index":1158}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":110966,"byte_end":110971,"line_start":672,"line_end":672,"column_start":37,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1160}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":111287,"byte_end":111295,"line_start":689,"line_end":689,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":824},{"krate":0,"index":825},{"krate":0,"index":826}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":111558,"byte_end":111566,"line_start":704,"line_end":704,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":830}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":111861,"byte_end":111869,"line_start":717,"line_end":717,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":836}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":112120,"byte_end":112128,"line_start":728,"line_end":728,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":843}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":112409,"byte_end":112417,"line_start":739,"line_end":739,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":848}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":112647,"byte_end":112655,"line_start":751,"line_end":751,"column_start":48,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":853}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":112869,"byte_end":112877,"line_start":762,"line_end":762,"column_start":19,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Inherent","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":112944,"byte_end":112952,"line_start":769,"line_end":769,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":860},{"krate":0,"index":864},{"krate":0,"index":867}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":114305,"byte_end":114315,"line_start":815,"line_end":815,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":879},{"krate":0,"index":880},{"krate":0,"index":881}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":114753,"byte_end":114763,"line_start":836,"line_end":836,"column_start":40,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":886}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":115077,"byte_end":115087,"line_start":851,"line_end":851,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":891}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":115257,"byte_end":115267,"line_start":860,"line_end":860,"column_start":31,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":896}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":115886,"byte_end":115898,"line_start":882,"line_end":882,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":907},{"krate":0,"index":908},{"krate":0,"index":909}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":116335,"byte_end":116347,"line_start":903,"line_end":903,"column_start":40,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":914}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":116660,"byte_end":116672,"line_start":918,"line_end":918,"column_start":26,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":919}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":116844,"byte_end":116856,"line_start":927,"line_end":927,"column_start":31,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":924}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":117537,"byte_end":117556,"line_start":948,"line_end":948,"column_start":34,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":936},{"krate":0,"index":937},{"krate":0,"index":938},{"krate":0,"index":939}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":118015,"byte_end":118034,"line_start":972,"line_end":972,"column_start":45,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":947}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":118239,"byte_end":118258,"line_start":983,"line_end":983,"column_start":31,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":953}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":118427,"byte_end":118446,"line_start":991,"line_end":991,"column_start":36,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":959}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":119055,"byte_end":119060,"line_start":1013,"line_end":1013,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":969},{"krate":0,"index":970},{"krate":0,"index":971},{"krate":0,"index":972}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":119487,"byte_end":119492,"line_start":1036,"line_end":1036,"column_start":40,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":979}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":119665,"byte_end":119670,"line_start":1046,"line_end":1046,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":984}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":119815,"byte_end":119820,"line_start":1054,"line_end":1054,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":989}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Inherent","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","byte_start":3147,"byte_end":3156,"line_start":101,"line_end":101,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1026}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","byte_start":3248,"byte_end":3257,"line_start":108,"line_end":108,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1028}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","byte_start":3345,"byte_end":3354,"line_start":114,"line_end":114,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1030}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Inherent","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","byte_start":3556,"byte_end":3562,"line_start":128,"line_end":128,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1034},{"krate":0,"index":1035},{"krate":0,"index":1036},{"krate":0,"index":1037},{"krate":0,"index":1038},{"krate":0,"index":1039},{"krate":0,"index":1040},{"krate":0,"index":1041}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","byte_start":2703,"byte_end":2706,"line_start":82,"line_end":82,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":54}},{"kind":"Mod","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","byte_start":2716,"byte_end":2719,"line_start":83,"line_end":83,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":639}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/equivalent.rs","byte_start":8623,"byte_end":8624,"line_start":18,"line_end":18,"column_start":46,"column_end":47},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":14},"to":{"krate":0,"index":10}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/mutable_keys.rs","byte_start":10491,"byte_end":10499,"line_start":52,"line_end":52,"column_start":31,"column_end":39},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":1060},"to":{"krate":0,"index":24}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":12513,"byte_end":12522,"line_start":43,"line_end":43,"column_start":10,"column_end":19},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":1049},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":12839,"byte_end":12848,"line_start":54,"line_end":54,"column_start":19,"column_end":28},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":1049},"to":{"krate":2,"index":2044}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":12875,"byte_end":12884,"line_start":55,"line_end":55,"column_start":20,"column_end":29},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":1049},"to":{"krate":2,"index":1732}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":12981,"byte_end":12990,"line_start":62,"line_end":62,"column_start":24,"column_end":33},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":1049},"to":{"krate":2,"index":1760}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":13218,"byte_end":13227,"line_start":71,"line_end":71,"column_start":35,"column_end":44},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":1049},"to":{"krate":2,"index":1760}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":13491,"byte_end":13500,"line_start":84,"line_end":84,"column_start":34,"column_end":43},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":1161},"to":{"krate":2,"index":1952}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":14410,"byte_end":14413,"line_start":111,"line_end":111,"column_start":16,"column_end":19},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":1057},"to":{"krate":2,"index":1732}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":14511,"byte_end":14514,"line_start":118,"line_end":118,"column_start":21,"column_end":24},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":1057},"to":{"krate":2,"index":6555}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":14738,"byte_end":14741,"line_start":127,"line_end":127,"column_start":6,"column_end":9},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":1057},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":17386,"byte_end":17400,"line_start":235,"line_end":235,"column_start":10,"column_end":24},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":115},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":19990,"byte_end":19998,"line_start":323,"line_end":323,"column_start":27,"column_end":35},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":1060},"to":{"krate":0,"index":1042}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":20914,"byte_end":20922,"line_start":360,"line_end":360,"column_start":30,"column_end":38},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":1060},"to":{"krate":2,"index":6555}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":22565,"byte_end":22573,"line_start":424,"line_end":424,"column_start":12,"column_end":20},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":1060},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":22971,"byte_end":22979,"line_start":439,"line_end":439,"column_start":15,"column_end":23},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":1060},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":24981,"byte_end":24993,"line_start":517,"line_end":517,"column_start":12,"column_end":24},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":1071},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":27436,"byte_end":27441,"line_start":602,"line_end":602,"column_start":16,"column_end":21},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":186},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":29332,"byte_end":29337,"line_start":666,"line_end":666,"column_start":65,"column_end":70},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":186},"to":{"krate":2,"index":6555}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":29900,"byte_end":29913,"line_start":686,"line_end":686,"column_start":16,"column_end":29},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":213},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":33035,"byte_end":33048,"line_start":775,"line_end":775,"column_start":65,"column_end":78},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":213},"to":{"krate":2,"index":6555}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":33549,"byte_end":33560,"line_start":795,"line_end":795,"column_start":16,"column_end":27},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":243},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":34513,"byte_end":34524,"line_start":830,"line_end":830,"column_start":52,"column_end":63},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":243},"to":{"krate":2,"index":6555}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":34719,"byte_end":34727,"line_start":838,"line_end":838,"column_start":15,"column_end":23},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":1060},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":48365,"byte_end":48373,"line_start":1274,"line_end":1274,"column_start":15,"column_end":23},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":1060},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":50699,"byte_end":50711,"line_start":1344,"line_end":1344,"column_start":12,"column_end":24},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":1071},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":68655,"byte_end":68659,"line_start":1834,"line_end":1834,"column_start":29,"column_end":33},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":395},"to":{"krate":2,"index":5281}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":68778,"byte_end":68782,"line_start":1840,"line_end":1840,"column_start":40,"column_end":44},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":395},"to":{"krate":2,"index":5210}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":68939,"byte_end":68943,"line_start":1846,"line_end":1846,"column_start":38,"column_end":42},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":395},"to":{"krate":2,"index":5235}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":69098,"byte_end":69102,"line_start":1853,"line_end":1853,"column_start":26,"column_end":30},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":395},"to":{"krate":2,"index":1732}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":69268,"byte_end":69272,"line_start":1861,"line_end":1861,"column_start":43,"column_end":47},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":395},"to":{"krate":2,"index":6555}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":69769,"byte_end":69775,"line_start":1878,"line_end":1878,"column_start":29,"column_end":35},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":425},"to":{"krate":2,"index":5281}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":69896,"byte_end":69902,"line_start":1884,"line_end":1884,"column_start":40,"column_end":46},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":425},"to":{"krate":2,"index":5210}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":70066,"byte_end":70072,"line_start":1890,"line_end":1890,"column_start":38,"column_end":44},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":425},"to":{"krate":2,"index":5235}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":70227,"byte_end":70233,"line_start":1897,"line_end":1897,"column_start":26,"column_end":32},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":425},"to":{"krate":2,"index":1732}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":70403,"byte_end":70409,"line_start":1905,"line_end":1905,"column_start":43,"column_end":49},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":425},"to":{"krate":2,"index":6555}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":70931,"byte_end":70940,"line_start":1922,"line_end":1922,"column_start":29,"column_end":38},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":455},"to":{"krate":2,"index":5281}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":71065,"byte_end":71074,"line_start":1928,"line_end":1928,"column_start":40,"column_end":49},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":455},"to":{"krate":2,"index":5210}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":71238,"byte_end":71247,"line_start":1934,"line_end":1934,"column_start":38,"column_end":47},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":455},"to":{"krate":2,"index":5235}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":71677,"byte_end":71681,"line_start":1951,"line_end":1951,"column_start":29,"column_end":33},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":475},"to":{"krate":2,"index":5281}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":71806,"byte_end":71810,"line_start":1957,"line_end":1957,"column_start":40,"column_end":44},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":475},"to":{"krate":2,"index":5210}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":71969,"byte_end":71973,"line_start":1963,"line_end":1963,"column_start":38,"column_end":42},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":475},"to":{"krate":2,"index":5235}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":72128,"byte_end":72132,"line_start":1970,"line_end":1970,"column_start":26,"column_end":30},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":475},"to":{"krate":2,"index":1732}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":72310,"byte_end":72314,"line_start":1978,"line_end":1978,"column_start":55,"column_end":59},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":475},"to":{"krate":2,"index":6555}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":72829,"byte_end":72836,"line_start":1995,"line_end":1995,"column_start":29,"column_end":36},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":505},"to":{"krate":2,"index":5281}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":72968,"byte_end":72975,"line_start":2001,"line_end":2001,"column_start":40,"column_end":47},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":505},"to":{"krate":2,"index":5210}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":73137,"byte_end":73144,"line_start":2007,"line_end":2007,"column_start":38,"column_end":45},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":505},"to":{"krate":2,"index":5235}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":73632,"byte_end":73640,"line_start":2024,"line_end":2024,"column_start":25,"column_end":33},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":525},"to":{"krate":2,"index":5281}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":73758,"byte_end":73766,"line_start":2030,"line_end":2030,"column_start":40,"column_end":48},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":525},"to":{"krate":2,"index":5210}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":73922,"byte_end":73930,"line_start":2036,"line_end":2036,"column_start":34,"column_end":42},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":525},"to":{"krate":2,"index":5235}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":74051,"byte_end":74059,"line_start":2042,"line_end":2042,"column_start":51,"column_end":59},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":525},"to":{"krate":2,"index":6555}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":74654,"byte_end":74659,"line_start":2064,"line_end":2064,"column_start":29,"column_end":34},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":546},"to":{"krate":2,"index":5281}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":74781,"byte_end":74786,"line_start":2070,"line_end":2070,"column_start":40,"column_end":45},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":546},"to":{"krate":2,"index":5210}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":75389,"byte_end":75397,"line_start":2098,"line_end":2098,"column_start":32,"column_end":40},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":1060},"to":{"krate":2,"index":5187}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":75723,"byte_end":75731,"line_start":2114,"line_end":2114,"column_start":47,"column_end":55},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":1060},"to":{"krate":2,"index":2312}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":76302,"byte_end":76310,"line_start":2136,"line_end":2136,"column_start":50,"column_end":58},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":1060},"to":{"krate":2,"index":2316}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":76684,"byte_end":76692,"line_start":2152,"line_end":2152,"column_start":40,"column_end":48},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":1060},"to":{"krate":2,"index":5183}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":77276,"byte_end":77284,"line_start":2171,"line_end":2171,"column_start":34,"column_end":42},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1060},"to":{"krate":2,"index":5196}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":78017,"byte_end":78025,"line_start":2192,"line_end":2192,"column_start":46,"column_end":54},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":1060},"to":{"krate":2,"index":5196}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":78421,"byte_end":78429,"line_start":2206,"line_end":2206,"column_start":27,"column_end":35},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":1060},"to":{"krate":2,"index":2022}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":78663,"byte_end":78671,"line_start":2216,"line_end":2216,"column_start":60,"column_end":68},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":1060},"to":{"krate":2,"index":1760}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/map.rs","byte_start":79036,"byte_end":79044,"line_start":2233,"line_end":2233,"column_start":22,"column_end":30},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":1060},"to":{"krate":2,"index":1765}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":93550,"byte_end":93558,"line_start":77,"line_end":77,"column_start":24,"column_end":32},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1131},"to":{"krate":0,"index":1042}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":94027,"byte_end":94035,"line_start":100,"line_end":100,"column_start":27,"column_end":35},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":1131},"to":{"krate":2,"index":6555}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":94460,"byte_end":94468,"line_start":116,"line_end":116,"column_start":9,"column_end":17},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":1131},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":94901,"byte_end":94909,"line_start":135,"line_end":135,"column_start":12,"column_end":20},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":1131},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":96107,"byte_end":96115,"line_start":187,"line_end":187,"column_start":12,"column_end":20},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":1131},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":107265,"byte_end":107273,"line_start":539,"line_end":539,"column_start":12,"column_end":20},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":1131},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":108931,"byte_end":108939,"line_start":587,"line_end":587,"column_start":22,"column_end":30},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":764},"to":{"krate":2,"index":5281}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":109036,"byte_end":109044,"line_start":593,"line_end":593,"column_start":33,"column_end":41},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":764},"to":{"krate":2,"index":5210}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":109188,"byte_end":109196,"line_start":599,"line_end":599,"column_start":31,"column_end":39},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":764},"to":{"krate":2,"index":5235}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":109299,"byte_end":109307,"line_start":605,"line_end":605,"column_start":36,"column_end":44},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":764},"to":{"krate":2,"index":6555}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":109838,"byte_end":109842,"line_start":623,"line_end":623,"column_start":26,"column_end":30},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":779},"to":{"krate":2,"index":5281}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":109955,"byte_end":109959,"line_start":629,"line_end":629,"column_start":37,"column_end":41},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":779},"to":{"krate":2,"index":5210}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":110115,"byte_end":110119,"line_start":635,"line_end":635,"column_start":35,"column_end":39},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":779},"to":{"krate":2,"index":5235}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":110213,"byte_end":110217,"line_start":641,"line_end":641,"column_start":23,"column_end":27},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":779},"to":{"krate":2,"index":1732}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":110367,"byte_end":110371,"line_start":649,"line_end":649,"column_start":40,"column_end":44},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":779},"to":{"krate":2,"index":6555}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":110856,"byte_end":110861,"line_start":666,"line_end":666,"column_start":26,"column_end":31},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":803},"to":{"krate":2,"index":5281}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":110966,"byte_end":110971,"line_start":672,"line_end":672,"column_start":37,"column_end":42},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":803},"to":{"krate":2,"index":5210}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":111287,"byte_end":111295,"line_start":689,"line_end":689,"column_start":29,"column_end":37},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":1131},"to":{"krate":2,"index":5187}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":111558,"byte_end":111566,"line_start":704,"line_end":704,"column_start":32,"column_end":40},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":1131},"to":{"krate":2,"index":5183}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":111861,"byte_end":111869,"line_start":717,"line_end":717,"column_start":26,"column_end":34},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":1131},"to":{"krate":2,"index":5196}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":112120,"byte_end":112128,"line_start":728,"line_end":728,"column_start":34,"column_end":42},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":1131},"to":{"krate":2,"index":5196}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":112409,"byte_end":112417,"line_start":739,"line_end":739,"column_start":24,"column_end":32},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":1131},"to":{"krate":2,"index":2022}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":112647,"byte_end":112655,"line_start":751,"line_end":751,"column_start":48,"column_end":56},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":1131},"to":{"krate":2,"index":1760}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":112869,"byte_end":112877,"line_start":762,"line_end":762,"column_start":19,"column_end":27},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":1131},"to":{"krate":2,"index":1765}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":112944,"byte_end":112952,"line_start":769,"line_end":769,"column_start":12,"column_end":20},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":1131},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":114305,"byte_end":114315,"line_start":815,"line_end":815,"column_start":29,"column_end":39},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":869},"to":{"krate":2,"index":5281}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":114753,"byte_end":114763,"line_start":836,"line_end":836,"column_start":40,"column_end":50},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":869},"to":{"krate":2,"index":5210}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":115077,"byte_end":115087,"line_start":851,"line_end":851,"column_start":26,"column_end":36},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":869},"to":{"krate":2,"index":1732}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":115257,"byte_end":115267,"line_start":860,"line_end":860,"column_start":31,"column_end":41},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":869},"to":{"krate":2,"index":6555}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":115886,"byte_end":115898,"line_start":882,"line_end":882,"column_start":29,"column_end":41},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":897},"to":{"krate":2,"index":5281}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":116335,"byte_end":116347,"line_start":903,"line_end":903,"column_start":40,"column_end":52},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":897},"to":{"krate":2,"index":5210}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":116660,"byte_end":116672,"line_start":918,"line_end":918,"column_start":26,"column_end":38},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":897},"to":{"krate":2,"index":1732}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":116844,"byte_end":116856,"line_start":927,"line_end":927,"column_start":31,"column_end":43},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":897},"to":{"krate":2,"index":6555}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":117537,"byte_end":117556,"line_start":948,"line_end":948,"column_start":34,"column_end":53},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":925},"to":{"krate":2,"index":5281}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":118015,"byte_end":118034,"line_start":972,"line_end":972,"column_start":45,"column_end":64},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":925},"to":{"krate":2,"index":5210}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":118239,"byte_end":118258,"line_start":983,"line_end":983,"column_start":31,"column_end":50},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":925},"to":{"krate":2,"index":1732}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":118427,"byte_end":118446,"line_start":991,"line_end":991,"column_start":36,"column_end":55},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":925},"to":{"krate":2,"index":6555}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":119055,"byte_end":119060,"line_start":1013,"line_end":1013,"column_start":29,"column_end":34},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":960},"to":{"krate":2,"index":5281}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":119487,"byte_end":119492,"line_start":1036,"line_end":1036,"column_start":40,"column_end":45},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":960},"to":{"krate":2,"index":5210}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":119665,"byte_end":119670,"line_start":1046,"line_end":1046,"column_start":26,"column_end":31},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":960},"to":{"krate":2,"index":1732}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/set.rs","byte_start":119815,"byte_end":119820,"line_start":1054,"line_end":1054,"column_start":31,"column_end":36},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":960},"to":{"krate":2,"index":6555}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","byte_start":3147,"byte_end":3156,"line_start":101,"line_end":101,"column_start":6,"column_end":15},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":1161},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","byte_start":3248,"byte_end":3257,"line_start":108,"line_end":108,"column_start":16,"column_end":25},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":1161},"to":{"krate":2,"index":1732}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","byte_start":3345,"byte_end":3354,"line_start":114,"line_end":114,"column_start":20,"column_end":29},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":1161},"to":{"krate":2,"index":1760}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.4.0/src/lib.rs","byte_start":3556,"byte_end":3562,"line_start":128,"line_end":128,"column_start":12,"column_end":18},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":1167},"to":{"krate":4294967295,"index":4294967295}}]}